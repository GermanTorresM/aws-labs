AWSTemplateFormatVersion: '2010-09-09'

Description: 'Kubernetes AWS CloudFormation Template: Create a Kubernetes
  cluster in a new VPC. The master node is an auto-recovering Amazon EC2
  instance. 1-20 additional EC2 instances in an AutoScalingGroup join the
  Kubernetes cluster as nodes. An ELB provides configurable external access
  to the Kubernetes API. The new VPC includes a bastion host to grant
  SSH access to the private subnet for the cluster. This template creates
  two stacks: one for the new VPC and one for the cluster. The stack is
  suitable for development and small single-team clusters. **WARNING** This
  template creates four Amazon EC2 instances with default settings. You will
  be billed for the AWS resources used if you create a stack from this template.'

##########################################  P A R A M E T E R S ##########################################
# The Parameters allow the user to pass custom settings to the stack before creation
Parameters:

  VpcCIDR:
    Description: Enter the IP range (CIDR notation) for this VPC
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.0.0/16  

  PublicASubnetAZ1CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.128.0/20

  PublicASubnetAZ2CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.144.0/20

  PrivateASubnetAZ1CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.0.0/19

  PrivateASubnetAZ2CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.32.0/19

  PrivateBSubnetAZ1CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.192.0/21

  PrivateBSubnetAZ2CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.200.0/21

  AvailabilityZone1:
    Description: The first availability zone in the region
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be the name of an valid Availability Zone
    #Default: !Select [0, !GetAZs '']
  
  AvailabilityZone2:
    Description: The second availability zone in the region
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be the name of an valid Availability Zone
    #Default: !Select [1, !GetAZs '']

  Ec2KeyPairName:
    AllowedPattern: ^([a-zA-Z0-9 @.`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and special characters.
    Description: Name of an EC2 KeyPair for SSH access. 
    Type: AWS::EC2::KeyPair::KeyName

  EnvironmentName:
    Type: String
    Description: Environment name - dev, test, stg or prod
    Default: dev
    AllowedValues:
      - dev
      - test
      - stg
      - prod
    ConstraintDescription: Specify either dev, test, stg or prod

  Owner:
    Type: String
    Default: OwnerName


##########################################  M E T A D A T A ##########################################
Metadata:

  Authors:
    Description: Germ√°n Torres M. (gtorres80@gmail.com)
  License:
    Description: 'Por definir'

  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: 'VPC Parameters'
      Parameters:
        - VpcCIDR
    - Label:
        default: 'Subnets Parameters'
      Parameters:
        - PublicASubnetAZ1CIDR
        - PublicASubnetAZ2CIDR
        - PrivateASubnetAZ1CIDR
        - PrivateASubnetAZ2CIDR
        - PrivateBSubnetAZ1CIDR
        - PrivateBSubnetAZ2CIDR
    - Label:
        default: 'Region Availability Zones'
      Parameters:
        - AvailabilityZone1
        - AvailabilityZone2
    - Label:
        default: 'EC2 Key Name Pair'
      Parameters:
        - Ec2KeyPairName
    - Label:
        default: 'Instance Parameters'
      Parameters:
        - InstanceType
    - Label:
        default: 'Admin Ingress Location'
      Parameters:
        - AdminIngressLocation
    - Label:
        default: Environment
      Parameters:
        - EnvironmentName
    - Label:
        default: OwnerName
      Parameters:
        - Owner

    ParameterLabels:
      VpcCIDR:
        default: VPC CIDR Block
      AvailabilityZone1:
        default: Availability Zone 1
      AvailabilityZone2:
        default: Availability Zone 2
      PublicASubnetAZ1CIDR:
        default: Public Subnet AZ 1
      PublicASubnetAZ2CIDR:
        default: Public Subnet AZ 2
      PrivateASubnetAZ1CIDR:
        default: Private Subnet AZ 1
      PrivateASubnetAZ2CIDR:
        default: Private Subnet AZ 2
      PrivateBSubnetAZ1CIDR:
        default: Private Subnet AZ 1
      PrivateBSubnetAZ2CIDR:
        default: Private Subnet AZ 2
      Ec2KeyPairName:
        default: EC2 Key Pair Name
      InstanceType:
        default: Instance Type
      AdminIngressLocation:
        default: Admin Ingress Location


##########################################  R E S O U R C E S ##########################################
Resources:
  ############## Create VPC ##############
  # StackName-environmentName-aws:region-vpc
  # ej. project-dev-us-east-1-vpc
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "vpc" ] ]
      - Key: kubernetes.io/cluster
        Value: !Ref AWS::StackName
      - Key: owner
        Value: !Ref Owner

  ############## Create Subnet ##############
  # StackName-environmentName-aws-availabilityZone1-public-subnet
  # ej. project-dev-us-east-1a-public-subnet
  PublicASubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicASubnetAZ1CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "public-subnet" ] ]
      - Key: Network
        Value: public

  # StackName-environmentName-aws-availabilityZone2-public-subnet
  # ej. project-dev-us-east-1b-public-subnet
  PublicASubnetAZ2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicASubnetAZ2CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "public-subnet" ] ]
      - Key: Network
        Value: public

  # StackName-environmentName-aws-availabilityZone1-private1-subnet
  # ej. project-dev-us-east-1a-private1-subnet
  PrivateASubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateASubnetAZ1CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "private1-subnet" ] ]
      - Key: Network
        Value: private
      #- Key: kubernetes.io/cluster
      #  Value: !Ref AWS::StackName
   
  # StackName-environmentName-aws-availabilityZone2-private1-subnet
  # ej. project-dev-us-east-1b-private1-subnet
  PrivateASubnetAZ2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateASubnetAZ2CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "private1-subnet" ] ]
      - Key: Network
        Value: private

  # StackName-environmentName-aws-availabilityZone1-private2-subnet
  # ej. project-dev-us-east-1a-private2-subnet
  PrivateBSubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateBSubnetAZ1CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "private2-subnet" ] ]
      - Key: Network
        Value: private
  
  # StackName-environmentName-aws-availabilityZone2-private2-subnet
  # ej. project-dev-us-east-1b-private2-subnet
  PrivateBSubnetAZ2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateBSubnetAZ2CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "private2-subnet" ] ]
      - Key: Network
        Value: private

  ############## Create Internet Gateway ##############
  # StackName-environmentName-aws:region-igw
  # ej. project-dev-us-east-1-igw
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "igw" ] ]
  
  ############## Attachment Internet Gateway ##############
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ############## Create Route Table Public ##############
  # StackName-environmentName-public-rtb
  # ej. project-dev-public-rtb
  RouteTablePublic: # should be RouteTableAPublic, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, "public-rtb" ] ]
      - Key: Network
        Value: public

  RouteTablePublicInternetRoute: # should be RouteTablePublicAInternetRoute, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Route Table Subnet Associations
  RouteTableAssociationPublicAZ1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicASubnetAZ1
      RouteTableId: !Ref RouteTablePublic
  
  RouteTableAssociationPublicAZ2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicASubnetAZ2
      RouteTableId: !Ref RouteTablePublic
 
  # The NAT IP for the private subnet, as seen from within the public one
  # ej. project-dev-us-east-1a-ip
  NatEIP1:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "ip" ] ]

  # The NAT IP for the private subnet, as seen from within the public one
  # ej. project-dev-us-east-1b-ip
  NatEIP2:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "ip" ] ]

  ############## Create NAT Gateway ##############
  # The NAT gateway for the private subnet
  # ej. project-dev-us-east-1a-nat-gw
  NATGateway1:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicASubnetAZ1
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "nat-gw" ] ]

  # The NAT gateway for the private subnet
  # ej. project-dev-us-east-1b-nat-gw
  NATGateway2:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicASubnetAZ2
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "nat-gw" ] ]
  
  ############## Create Route Table Private ##############
  # StackName-environmentName-aws:availabilityZone1-private1-rtb
  # ej. project-dev-us-east-1a-private1-rtb
  RouteTableAPrivateAZ1: # should be RouteTableAPrivate, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone1, "private1-rtb" ] ]
      - Key: Network
        Value: private
  
  RouteTableAPrivateAZ1Route:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableAPrivateAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  RouteTableAssociationAPrivateAZ1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateASubnetAZ1
      RouteTableId: !Ref RouteTableAPrivateAZ1

  # StackName-environmentName-aws:availabilityZone2-private1-rtb
  # ej. project-dev-us-east-1b-private1-rtb
  RouteTableAPrivateAZ2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone2, "private1-rtb" ] ]
      - Key: Network
        Value: private

  RouteTableAPrivateAZ2Route:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableAPrivateAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  RouteTableAssociationAPrivateAZ2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateASubnetAZ2
      RouteTableId: !Ref RouteTableAPrivateAZ2
  
  # StackName-environmentName-aws:availabilityZone1-private2-rtb
  # ej. project-dev-us-east-1a-private2-rtb
  RouteTableBPrivateAZ1: # should be RouteTableAPrivate, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone1, "private2-rtb" ] ]
      - Key: Network
        Value: private
  
  RouteTableBPrivateAZ1Route:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableBPrivateAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  RouteTableAssociationAPrivateAZ1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateBSubnetAZ1
      RouteTableId: !Ref RouteTableBPrivateAZ1

  # StackName-environmentName-aws:availabilityZone2-private2-rtb
  # ej. project-dev-us-east-1b-private2-rtb
  RouteTableBPrivateAZ2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone2, "private2-rtb" ] ]
      - Key: Network
        Value: private

  RouteTableBPrivateAZ2Route:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableBPrivateAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  RouteTableAssociationBPrivateAZ2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateBSubnetAZ2
      RouteTableId: !Ref RouteTableBPrivateAZ2

  # Specifies the IP range from which you will have SSH access over port 22
  # Used in the allow22 SecurityGroup
  AdminIngressLocation:
    Description: CIDR block (IP address range) to allow SSH access to the
      bastion host. Use 0.0.0.0/0
      to allow access from all locations.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  # Open up port 22 for SSH for the bastion host
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref AdminIngressLocation
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, "ssh-bastion-sg" ] ]









##########################################  O U T P U T S ##########################################
Outputs:
  TemplateID:
    Description: 'germantorres.co template id.'
    Value: 'vpc/vpc-2azs'
  TemplateVersion:
    Description: 'germantorres.co template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  AZs: # Better name would be NumberOfAZs, but we keep the name for backward compatibility
    Description: 'Number of AZs'
    Value: 2
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZList:  # Better name would be AZs, but the name was already used
    Description: 'List of AZs'
    Value: !Join [',', [!Select [0, !GetAZs ''], !Select [1, !GetAZs '']]]
    Export:
      Name: !Sub '${AWS::StackName}-AZList'
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'
  CidrBlock:
    Description: 'The set of IP addresses for the VPC.'
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'
  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref PublicASubnetAZ1, !Ref PublicASubnetAZ2]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  SubnetsAPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref PrivateASubnetAZ1, !Ref PrivateASubnetAZ2]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsAPrivate'
  SubnetsBPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref PrivateBSubnetAZ1, !Ref PrivateBSubnetAZ2]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsBPrivate'