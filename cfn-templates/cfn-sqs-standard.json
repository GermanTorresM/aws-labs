{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Best Practice SQS Standard Queue",
    "Parameters": {
        "VisibilityTimeout": {
            "Description": "Should be between 0 seconds and 12 hours. This should be longer than the time it would take to process and delete a message, this should not exceed 12 hours.",
            "Type": "Number",
            "Default": "5"
        },
        "MessageRetentionPeriod": {
            "Description": "Should be between 1 minute and 14 days. The number of seconds that Amazon SQS retains a message. You can specify an integer value from 60 seconds (1 minute) to 1209600 seconds (14 days). ",
            "Type": "Number",
            "Default": "345600"
        },        
        "DelaySeconds": {
            "Description": "Should be between 0 seconds and 15 minutes. The time in seconds that the delivery of all messages in the queue is delayed. You can specify an integer value of 0 to 900 (15 minutes).",
            "Type": "Number",
            "Default": "5"
        },
        "MaximumMessageSize": {
            "Type": "Number",
            "Description": "Should be between 1 KB and 256 KB. The limit of how many bytes that a message can contain before Amazon SQS rejects it, 1024 bytes (1 KiB) to 262144 bytes (256 KiB)",
            "Default": "262144"
        },        
        "ReceiveMessageWaitTimeSeconds": {
            "Description": "Should be between 0 and 20 seconds. Specifies the duration, in seconds, that the ReceiveMessage action call waits until a message is in the queue in order to include it in the response, as opposed to returning an empty response if a message is not yet available. 1 to 20",
            "Type": "Number",
            "Default": "0"
        },
        "UsedeadletterQueue": {
            "Description": "A dead-letter queue is a queue that other (source) queues can target for messages that can't be processed (consumed) successfully. You can set aside and isolate these messages in the dead-letter queue to determine why their processing doesn't succeed.",
            "Type": "String",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Default": "false"
        }        
    },
    "Mappings": {},
    "Conditions": {
        "CreateDeadLetterQueue": {
            "Fn::Equals": [
                {
                    "Ref": "UsedeadletterQueue"
                },
                "true"
            ]
        }
    },
    "Resources": {
        "SQSQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
                "DelaySeconds": {
                    "Ref": "DelaySeconds"
                },
                "MaximumMessageSize": {
                    "Ref": "MaximumMessageSize"
                },
                "MessageRetentionPeriod": {
                    "Ref": "MessageRetentionPeriod"
                },
                "ReceiveMessageWaitTimeSeconds": {
                    "Ref": "ReceiveMessageWaitTimeSeconds"
                },
                "RedrivePolicy": {
                    "Fn::If": [
                        "CreateDeadLetterQueue",
                        {
                            "deadLetterTargetArn": {
                                "Fn::GetAtt": [
                                    "DeadLetterQueueName",
                                    "Arn"
                                ]
                            },
                            "maxReceiveCount": 5
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "VisibilityTimeout": {
                    "Ref": "VisibilityTimeout"
                }
            }
        },
        "DeadLetterQueueName": {
            "Condition": "CreateDeadLetterQueue",
            "Type": "AWS::SQS::Queue"
        }
    },
    "Outputs": {
        "QueueURL": {
            "Description": "URL of newly created SQS Queue",
            "Value": {
                "Ref": "SQSQueue"
            }
        },
        "QueueARN": {
            "Description": "ARN of newly created SQS Queue",
            "Value": {
                "Fn::GetAtt": [
                    "SQSQueue",
                    "Arn"
                ]
            }
        },
        "QueueName": {
            "Description": "Name newly created SQS Queue",
            "Value": {
                "Fn::GetAtt": [
                    "SQSQueue",
                    "QueueName"
                ]
            }
        },
        "DeadLetterQueueURL": {
            "Condition": "CreateDeadLetterQueue",
            "Description": "URL of the dead letter queue",
            "Value": {
                "Ref": "DeadLetterQueueName"
            }
        },
        "DeadLetterQueueARN": {
            "Condition": "CreateDeadLetterQueue",
            "Description": "ARN of the dead letter queue",
            "Value": {
                "Fn::GetAtt": [
                    "DeadLetterQueueName",
                    "Arn"
                ]
            }
        }
    }
}