AWSTemplateFormatVersion: '2010-09-09'

Description: 'VPC: public and private subnets in two availability zones v20221115-1430'


##########################################  P A R A M E T E R S ##########################################
# The Parameters allow the user to pass custom settings to the stack before creation
Parameters:

  # Ownership
  Owner:
    Type: String
    Default: FirstName LastName

  # ProjectName
  ProjectName:
    Type: String
    Description: 'Project Name'

  # VPC
  VpcCIDR:
    Description: Enter the IP range (CIDR notation) for this VPC - 10.0.0.0/16 = 10.0.0.0-10.0.255.255 = 256 Subnets = 65534 hosts
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    MinLength: '10'
    MaxLength: '18'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.0.0/16

  # Subnets
  PublicSubnetAZ1CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.128.0/20
    MinLength: '10'
    MaxLength: '18'

  PublicSubnetAZ2CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.144.0/20
    MinLength: '10'
    MaxLength: '18'

  PrivateASubnetAZ1CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.16.0/19
    MinLength: '10'
    MaxLength: '18'

  PrivateASubnetAZ2CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.32.0/19
    MinLength: '10'
    MaxLength: '18'

  PrivateBSubnetAZ1CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.192.0/21
    MinLength: '10'
    MaxLength: '18'

  PrivateBSubnetAZ2CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.200.0/21
    MinLength: '10'
    MaxLength: '18'

  # AvailabilityZone
  AvailabilityZone1:
    Description: The first availability zone in the region
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone
    #Default: !Select [0, !GetAZs '']
  
  AvailabilityZone2:
    Description: The second availability zone in the region
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone
    #Default: !Select [1, !GetAZs '']

  EnvironmentName:
    Type: String
    Description: Environment name - dev, test, stg or prod
    Default: dev
    AllowedValues:
      - dev
      - test
      - stg
      - prod
    ConstraintDescription: Specify either dev, test, stg or prod


##########################################  M E T A D A T A ##########################################
Metadata:
  
  Authors:
    Description: Germ√°n Torres M. (gtorres80@gmail.com)
  License:
    Description: 'Por definir'

  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: 'Project Name'
      Parameters:
        - ProjectName
    - Label:
        default: 'VPC Parameters'
      Parameters:
        - VpcCIDR
    - Label:
        default: 'Subnets Parameters'
      Parameters:
        - PublicSubnetAZ1CIDR
        - PublicSubnetAZ2CIDR
        - PrivateASubnetAZ1CIDR
        - PrivateASubnetAZ2CIDR
        - PrivateBSubnetAZ1CIDR
        - PrivateBSubnetAZ2CIDR
    - Label:
        default: 'Region Availability Zones'
      Parameters:
        - AvailabilityZone1
        - AvailabilityZone2
    - Label:
        default: Environment Variable
      Parameters:
        - EnvironmentName
        - Owner

    ParameterLabels:
      ProjectName:
        default: Project Name
      VpcCIDR:
        default: VPC CIDR Block
      AvailabilityZone1:
        default: Availability Zone 1
      AvailabilityZone2:
        default: Availability Zone 2
      PublicSubnetAZ1CIDR:
        default: Public Subnet AZ 1
      PublicSubnetAZ2CIDR:
        default: Public Subnet AZ 2
      PrivateASubnetAZ1CIDR:
        default: Private 1 Subnet AZ 1
      PrivateASubnetAZ2CIDR:
        default: Private 1 Subnet AZ 2
      PrivateBSubnetAZ1CIDR:
        default: Private 2 Subnet AZ 1
      PrivateBSubnetAZ2CIDR:
        default: Private 2 Subnet AZ 2


##########################################  R E S O U R C E S ##########################################
Resources:
  ############## Create VPC ##############
  # projectName-environmentName-aws:region-vpc
  # ej. project-dev-us-east-1-vpc
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref "AWS::Region", "vpc" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName
    
  ############## Create Subnet ##############
  # projectName-environmentName-aws-availabilityZone1-public-subnet
  # ej. project-dev-us-east-1a-public-subnet
  PublicSubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnetAZ1CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "public-subnet" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone2-public-subnet
  # ej. project-dev-us-east-1b-public-subnet
  PublicSubnetAZ2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnetAZ2CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "public-subnet" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone1-private1-subnet
  # ej. project-dev-us-east-1a-private1-subnet
  PrivateASubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateASubnetAZ1CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "private1-subnet" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName
   
  # projectName-environmentName-aws-availabilityZone2-private1-subnet
  # ej. project-dev-us-east-1b-private1-subnet
  PrivateASubnetAZ2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateASubnetAZ2CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "private1-subnet" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone1-private2-subnet
  # ej. project-dev-us-east-1a-private2-subnet
  PrivateBSubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateBSubnetAZ1CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "private2-subnet" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  # projectName-environmentName-aws-availabilityZone2-private2-subnet
  # ej. project-dev-us-east-1b-private2-subnet
  PrivateBSubnetAZ2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateBSubnetAZ2CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name    
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "private2-subnet" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName

  ############## Create Internet Gateway ##############
  # projectName-environmentName-aws:region-igw
  # ej. project-dev-us-east-1-igw
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref "AWS::Region", "igw" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  ############## Attachment Internet Gateway ##############
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
    - InternetGateway
    - VPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ############## Create Route Table Public ##############
  # StackName-environmentName-public-rtb
  # ej. project-dev-us-east-1a-public-rtb
  RouteTablePublicAZ1:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref AvailabilityZone1, "public-rtb" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTablePublicInternetRouteAZ1:
    Type: 'AWS::EC2::Route'
    DependsOn: 
    - VPCGatewayAttachment
    - RouteTablePublicAZ1
    Properties:
      RouteTableId: !Ref RouteTablePublicAZ1
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Route Table Subnet Associations
  RouteTableAssociationPublicAZ1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicSubnetAZ1
    - RouteTablePublicAZ1
    Properties:
      SubnetId: !Ref PublicSubnetAZ1
      RouteTableId: !Ref RouteTablePublicAZ1
  
  # ej. project-dev-us-east-1b-public-rtb
  RouteTablePublicAZ2:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref AvailabilityZone2, "public-rtb" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTablePublicInternetRouteAZ2:
    Type: 'AWS::EC2::Route'
    DependsOn: 
    - VPCGatewayAttachment
    - RouteTablePublicAZ2
    Properties:
      RouteTableId: !Ref RouteTablePublicAZ2
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  RouteTableAssociationPublicAZ2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicSubnetAZ2
    - RouteTablePublicAZ2
    Properties:
      SubnetId: !Ref PublicSubnetAZ2
      RouteTableId: !Ref RouteTablePublicAZ2
 
  # The NAT IP for the private subnet, as seen from within the public one
  # ej. project-dev-us-east-1a-ip
  NatEIP1:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "ip" ] ]      

  # The NAT IP for the private subnet, as seen from within the public one
  # ej. project-dev-us-east-1b-ip
  NatEIP2:    
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "ip" ] ]

  ############## Create NAT Gateway ##############
  # The NAT gateway for the private subnet
  # ej. project-dev-us-east-1a-nat-gw
  NATGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn:
    - VPCGatewayAttachment
    - PublicSubnetAZ1
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnetAZ1
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "nat-gw" ] ]

  # The NAT gateway for the private subnet
  # ej. project-dev-us-east-1b-nat-gw
  NATGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn:
    - VPCGatewayAttachment
    - PublicSubnetAZ2
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnetAZ2
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "nat-gw" ] ]
  
  ############## Create Route Table Private ##############
  # StackName-environmentName-aws:availabilityZone1-private1-rtb
  # ej. project-dev-us-east-1a-private1-rtb
  RouteTableAPrivateAZ1: # should be RouteTableAPrivate, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref AvailabilityZone1, "private1-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  RouteTableAPrivateAZ1Route:
    Type: 'AWS::EC2::Route'
    DependsOn: 
    - VPCGatewayAttachment
    - RouteTableAPrivateAZ1
    - NATGateway1
    Properties:
      RouteTableId: !Ref RouteTableAPrivateAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  RouteTableAssociationAPrivateAZ1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateASubnetAZ1
    - RouteTableAPrivateAZ1
    Properties:
      SubnetId: !Ref PrivateASubnetAZ1
      RouteTableId: !Ref RouteTableAPrivateAZ1

  # ProjectName-EnvironmentName-aws:availabilityZone2-private1-rtb
  # ej. project-dev-us-east-1b-private1-rtb
  RouteTableAPrivateAZ2:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref AvailabilityZone2, "private1-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTableAPrivateAZ2Route:
    Type: 'AWS::EC2::Route'
    DependsOn: 
    - VPCGatewayAttachment
    - RouteTableAPrivateAZ2
    - NATGateway2
    Properties:
      RouteTableId: !Ref RouteTableAPrivateAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  RouteTableAssociationAPrivateAZ2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateASubnetAZ2
    - RouteTableAPrivateAZ2
    Properties:
      SubnetId: !Ref PrivateASubnetAZ2
      RouteTableId: !Ref RouteTableAPrivateAZ2
  
  # ProjectName-EnvironmentName-aws:availabilityZone1-private2-rtb
  # ej. project-dev-us-east-1a-private2-rtb
  RouteTableBPrivateAZ1: # should be RouteTableAPrivate, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref AvailabilityZone1, "private2-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  RouteTableBPrivateAZ1Route:
    Type: 'AWS::EC2::Route'
    DependsOn:
    - VPCGatewayAttachment
    - RouteTableBPrivateAZ1
    - NATGateway1
    Properties:
      RouteTableId: !Ref RouteTableBPrivateAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  RouteTableAssociationBPrivateAZ1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateBSubnetAZ1
    - RouteTableBPrivateAZ1
    Properties:
      SubnetId: !Ref PrivateBSubnetAZ1
      RouteTableId: !Ref RouteTableBPrivateAZ1

  # ProjectName-EnvironmentName-aws:availabilityZone2-private2-rtb
  # ej. project-dev-us-east-1b-private2-rtb
  RouteTableBPrivateAZ2:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref AvailabilityZone2, "private2-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTableBPrivateAZ2Route:
    Type: 'AWS::EC2::Route'
    DependsOn:
    - VPCGatewayAttachment
    - RouteTableBPrivateAZ2
    - NATGateway2
    Properties:
      RouteTableId: !Ref RouteTableBPrivateAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  RouteTableAssociationBPrivateAZ2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateBSubnetAZ2
    - RouteTableBPrivateAZ2
    Properties:
      SubnetId: !Ref PrivateBSubnetAZ2
      RouteTableId: !Ref RouteTableBPrivateAZ2

  # ProjectName-EnvironmentName-aws:region-public-nacl
  # ej. project-dev-us-east-1-public-nacl
  NetworkAclPublic:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref "AWS::Region", "public-nacl" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName

  # Public Network ACL Rules
  NetworkAclEntryInboundPublicAllowVPCSubnets:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref VpcCIDR             
      PortRange:
        From: 0
        To: 65535
      
  NetworkAclEntryInboundPublicAllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  NetworkAclEntryInboundPublicAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 205
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  NetworkAclEntryInboundPublicDenyMSSQL:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 800
      Protocol: 6
      RuleAction: deny
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1433
        To: 1433

  NetworkAclEntryInboundPublicDenyOracle:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 805
      Protocol: 6
      RuleAction: deny
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1521
        To: 1521

  NetworkAclEntryInboundPublicDenyAurora:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 810
      Protocol: 6
      RuleAction: deny
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3306
        To: 3306

  NetworkAclEntryInboundPublicDenyNFS:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 815
      Protocol: 6
      RuleAction: deny
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 2049
        To: 2049

  NetworkAclEntryInboundPublicDenyRDP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 820
      Protocol: 6
      RuleAction: deny
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3389
        To: 3389

  NetworkAclEntryInboundPublicDenyPostgres:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 825
      Protocol: 6
      RuleAction: deny
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 5432
        To: 5432

  NetworkAclEntryInboundPublicDeny8080:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 830
      Protocol: 6
      RuleAction: deny
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 8080
        To: 8080

  NetworkAclEntryInboundPublicDeny8443:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 835
      Protocol: 6
      RuleAction: deny
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 8443
        To: 8443

  NetworkAclEntryInboundPublicAllowReturnTraffic:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 900
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  NetworkAclEntryOutboundPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPublic
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  SubnetNetworkAclAssociationPublicAZ1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn: 
    - NetworkAclPublic
    - PublicSubnetAZ1
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      SubnetId: !Ref PublicSubnetAZ1
  
  SubnetNetworkAclAssociationPublicAZ2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - NetworkAclPublic
    - PublicSubnetAZ2
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      SubnetId: !Ref PublicSubnetAZ2

  # ProjectName-EnvironmentName-aws::region-private-nacl
  # ej. project-dev-us-east-1-private-nacl
  NetworkAclPrivate:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ProjectName, !Ref EnvironmentName, !Ref "AWS::Region", "private-nacl" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref EnvironmentName  

  # Private Network ACL Rules
  NetworkAclEntryInboundPrivateAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPrivate
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 150
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  NetworkAclEntryOutboundPrivateAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: NetworkAclPrivate
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
  
  SubnetNetworkAclAssociationAPrivateAZ1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - NetworkAclPrivate
    - PrivateASubnetAZ1
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      SubnetId: !Ref PrivateASubnetAZ1
  
  SubnetNetworkAclAssociationAPrivateAZ2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - NetworkAclPrivate
    - PrivateASubnetAZ2
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      SubnetId: !Ref PrivateASubnetAZ2

  SubnetNetworkAclAssociationBPrivateAZ1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - NetworkAclPrivate
    - PrivateBSubnetAZ1
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      SubnetId: !Ref PrivateBSubnetAZ1
  
  SubnetNetworkAclAssociationBPrivateAZ2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - NetworkAclPrivate
    - PrivateBSubnetAZ2
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      SubnetId: !Ref PrivateBSubnetAZ2

##########################################  O U T P U T S ##########################################
Outputs:
  TemplateID:
    Description: 'germantorres.co template id.'
    Value: 'vpc/vpc-2azs'
  TemplateVersion:
    Description: 'germantorres.co template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  NumberOfAZs:
    Description: 'Number of AZs'
    Value: 2
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZList:  # Better name would be AZs, but the name was already used
    Description: 'List of AZs'
    Value: !Join [',', [!Select [0, !GetAZs ''], !Select [1, !GetAZs '']]]
    Export:
      Name: !Sub '${AWS::StackName}-AZList'
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'
  CidrBlock:
    Description: 'The set of IP addresses for the VPC.'
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'
  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  InternetGateway:
    Description: 'InternetGateway.'
    Value: !Ref InternetGateway
    Export:
      Name: !Sub '${AWS::StackName}-InternetGateway'
  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref PublicSubnetAZ1, !Ref PublicSubnetAZ2]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  SubnetsAPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref PrivateASubnetAZ1, !Ref PrivateASubnetAZ2]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsAPrivate'
  SubnetsBPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref PrivateBSubnetAZ1, !Ref PrivateBSubnetAZ2]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsBPrivate'  
  RouteTablesPublic:
    Description: 'Route tables public.'
    Value: !Join [',', [!Ref RouteTablePublicAZ1, !Ref RouteTablePublicAZ2]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPublic'
  RouteTablesPrivate:
    Description: 'Route tables private.'
    Value: !Join [',', [!Ref RouteTableAPrivateAZ1, !Ref RouteTableAPrivateAZ2]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPrivate'