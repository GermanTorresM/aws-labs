---
AWSTemplateFormatVersion: '2010-09-09'

Description: >-
  Version: v2023.07.25-10.30
  Include:
    Four Availability Zones 
    Subnet for Application Load Balancer (can disable).
    Subnet for Shared Services (can disable).
    Subnet for Application
    Subnet for Database (can disable using parameter).



##########################################  P A R A M E T E R S ##########################################
# The Parameters allow the user to pass custom settings to the stack before creation
Parameters:

  # Ownership
  Owner:
    Type: String
    Default: Team or Individual Owner

  # Name Project
  #ProjectName:
  #  Type: String
  #  Description: The naming prefix for resources created by this template, and exported values that can be referenced by other stacks.
  #  Default: project-name

  # VPC
  VpcIPv4CidrBlock:
    Description: Enter the IP range (CIDR notation) for this VPC - Default of 10.0.0.0/16 is recommended for testing. 10.0.0.0-10.0.255.255 = 256 Subnets = 65534 hosts
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    MinLength: '10'
    MaxLength: '18'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.0.0/16

  # 
  VPCFlowLogRetention:
    Description: VPC Flow Log retention time in days. Note that VPC Flow Logs will be deleted when this stack is deleted.
    Type: String
    Default: 90

  # AvailabilityZone
  AvailabilityZone1:
    Description: The first availability zone in the region
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone    
  
  AvailabilityZone2:
    Description: The second availability zone in the region
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone

  AvailabilityZone3:
    Description: The second availability zone in the region
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone

  AvailabilityZone4:
    Description: The second availability zone in the region
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone

  #ALB #1 Tier:
  PublicAlbSubnetsEnabled:
    Description: Create subnets and other resources for application load balancer (ALB) tier. False disables the ALB tier completely. 
    Type: String
    AllowedValues:
      - true
      - false
    Default: true

  #Shared #1 Tier:
  PublicSharedSubnetsEnabled:
    Description: Create subnets for shared tier. Set to true when enabling application route to internet parameter as the shared tier contains NAT gateways that allow IPv4 traffic in the application tier to connect to the internet. False disables the shared tier completely.
    Type: String
    AllowedValues:
      - true
      - false
    Default: true

  #DB #1 Tier:
  PrivateDBSubnetsEnabled:
    Description: Create subnets and other resources for database (DB) tier. False disables the DB tier completely.
    Type: String
    AllowedValues:
      - true
      - false
    Default: true

  #Spare #1 Tier:
  PrivateSpareSubnetsEnabled:
    Description: Create subnets and other resources for spare tier. False disables the Spare tier completely.
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
  
  # Subnets
  PublicAlbSubnetAZ1CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.128.0/22
    MinLength: '10'
    MaxLength: '18'

  PublicAlbSubnetAZ2CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.132.0/22
    MinLength: '10'
    MaxLength: '18'

  PublicAlbSubnetAZ3CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the third Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.136.0/22
    MinLength: '10'
    MaxLength: '18'

  PublicAlbSubnetAZ4CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the fourth Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.140.0/22
    MinLength: '10'
    MaxLength: '18'

  PublicSharedSubnetAZ1CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.144.0/21
    MinLength: '10'
    MaxLength: '18'

  PublicSharedSubnetAZ2CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.152.0/21
    MinLength: '10'
    MaxLength: '18'

  PublicSharedSubnetAZ3CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the third Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.160.0/21
    MinLength: '10'
    MaxLength: '18'

  PublicSharedSubnetAZ4CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the fourth Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.168.0/21
    MinLength: '10'
    MaxLength: '18'

  PrivateAppSubnetAZ1CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.0.0/19
    MinLength: '10'
    MaxLength: '18'

  PrivateAppSubnetAZ2CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.32.0/19
    MinLength: '10'
    MaxLength: '18'

  PrivateAppSubnetAZ3CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the third Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.64.0/19
    MinLength: '10'
    MaxLength: '18'

  PrivateAppSubnetAZ4CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the fourth Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.96.0/19
    MinLength: '10'
    MaxLength: '18'

  PrivateDBSubnetAZ1CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.192.0/21
    MinLength: '10'
    MaxLength: '18'

  PrivateDBSubnetAZ2CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.200.0/21
    MinLength: '10'
    MaxLength: '18'

  PrivateDBSubnetAZ3CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the third Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.208.0/21
    MinLength: '10'
    MaxLength: '18'

  PrivateDBSubnetAZ4CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the fourth Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.216.0/21
    MinLength: '10'
    MaxLength: '18'

  PrivateSpareSubnetAZ1CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.224.0/21
    MinLength: '10'
    MaxLength: '18'

  PrivateSpareSubnetAZ2CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.232.0/21
    MinLength: '10'
    MaxLength: '18'

  PrivateSpareSubnetAZ3CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the third Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.240.0/21
    MinLength: '10'
    MaxLength: '18'

  PrivateSpareSubnetAZ4CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the fourth Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.248.0/21
    MinLength: '10'
    MaxLength: '18'
  
  # PrivateDSubnetAZ1CIDR:
  #   Description: Enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
  #   Type: String
  #   AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  #   ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  #   Default: 10.0.176.0/22
  #   MinLength: '10'
  #   MaxLength: '18'

  # PrivateDSubnetAZ2CIDR:
  #   Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
  #   Type: String
  #   AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  #   ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  #   Default: 10.0.180.0/22
  #   MinLength: '10'
  #   MaxLength: '18'

  # PrivateDSubnetAZ3CIDR:
  #   Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
  #   Type: String
  #   AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  #   ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  #   Default: 10.0.184.0/22
  #   MinLength: '10'
  #   MaxLength: '18'

  # PrivateDSubnetAZ4CIDR:
  #   Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
  #   Type: String
  #   AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  #   ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  #   Default: 10.0.188.0/22
  #   MinLength: '10'
  #   MaxLength: '18'

  DBTCPPortNumber:
    Description: TCP/IP port number used in DB tier for Network ACL (NACL). Default is 3306 for MySQL. Examples; 5432 for PostgreSQL, 1433 for SQL Server, , 11211 for Memcache/Elasticache, 6379 for Redis.
    Type: Number
    Default: 3306

  EnvironmentName:
    Type: String
    Description: Environment name - dev, test, stg or prod
    Default: dev
    AllowedValues:
      - dev
      - test
      - stg
      - prod
    ConstraintDescription: Specify either dev, test, stg or prod



##########################################  M E T A D A T A ##########################################
Metadata:

  Authors:
    Description: Germán Torres M. (gtorres80@gmail.com)
  License:
    Description: 'Por definir'
  
  AWS::CloudFormation::Interface:
    ParameterGroups:    
    - Label:
        default: 'VPC Parameters'
      Parameters:
        - VpcIPv4CidrBlock
        - VPCFlowLogRetention
    - Label:
        default: 'Region Availability Zones'
      Parameters:
        - AvailabilityZone1
        - AvailabilityZone2
        - AvailabilityZone3
        - AvailabilityZone4
    - Label:
        default: 'Subnets Parameters - Application Load Balancer Tier'
      Parameters:
        - PublicAlbSubnetsEnabled
        - PublicAlbSubnetAZ1CIDR
        - PublicAlbSubnetAZ2CIDR
        - PublicAlbSubnetAZ3CIDR
        - PublicAlbSubnetAZ4CIDR
    - Label:
        default: 'Subnets Parameters - Shared Tier'
      Parameters:
        - PublicSharedSubnetsEnabled
        - PublicSharedSubnetAZ1CIDR
        - PublicSharedSubnetAZ2CIDR
        - PublicSharedSubnetAZ3CIDR
        - PublicSharedSubnetAZ4CIDR
    - Label:
        default: 'Subnets Parameters - Application Tier'
      Parameters:
        - PrivateAppSubnetAZ1CIDR
        - PrivateAppSubnetAZ2CIDR
        - PrivateAppSubnetAZ3CIDR
        - PrivateAppSubnetAZ4CIDR
    - Label:
        default: 'Subnets Parameters - Database Tier'
      Parameters:
        - PrivateDBSubnetsEnabled
        - PrivateDBSubnetAZ1CIDR
        - PrivateDBSubnetAZ2CIDR
        - PrivateDBSubnetAZ3CIDR
        - PrivateDBSubnetAZ4CIDR
        - DBTCPPortNumber
    - Label:
        default: 'Subnets Parameters - Spare Tier'
      Parameters:
        - PrivateSpareSubnetsEnabled
        - PrivateSpareSubnetAZ1CIDR
        - PrivateSpareSubnetAZ2CIDR
        - PrivateSpareSubnetAZ3CIDR
        - PrivateSpareSubnetAZ4CIDR
    - Label:
        default: Environment
      Parameters:
        - EnvironmentName
        - Owner
    
    ParameterLabels:
      VpcIPv4CidrBlock:
        default: VPC IPv4 CIDR Block
      VPCFlowLogRetention:
        default: Days to retain VPC Flow Logs
      AvailabilityZone1:
        default: Availability Zone 1
      AvailabilityZone2:
        default: Availability Zone 2
      AvailabilityZone3:
        default: Availability Zone 3
      AvailabilityZone4:
        default: Availability Zone 4
      PublicAlbSubnetsEnabled:
        default: Application Load Balancer tier
      PublicAlbSubnetAZ1CIDR:
        default: Public Subnet Application Load Balancer Availability Zone 1
      PublicAlbSubnetAZ2CIDR:
        default: Public Subnet Application Load Balancer Availability Zone 2
      PublicAlbSubnetAZ3CIDR:
        default: Public Subnet Application Load Balancer Availability Zone 3
      PublicAlbSubnetAZ4CIDR:
        default: Public Subnet Application Load Balancer Availability Zone 4
      PublicSharedSubnetsEnabled:
        default: Shared tier
      PublicSharedSubnetAZ1CIDR:
        default: Public Subnet Shared Availability Zone 1
      PublicSharedSubnetAZ2CIDR:
        default: Public Subnet Shared Availability Zone 2
      PublicSharedSubnetAZ3CIDR:
        default: Public Subnet Shared Availability Zone 3
      PublicSharedSubnetAZ4CIDR:
        default: Public Subnet Shared Availability Zone 4      
      PrivateAppSubnetAZ1CIDR:
        default: Private Subnet Application Availability Zone 1
      PrivateAppSubnetAZ2CIDR:
        default: Private Subnet Application Availability Zone 2
      PrivateAppSubnetAZ3CIDR:
        default: Private Subnet Application Availability Zone 3
      PrivateAppSubnetAZ4CIDR:
        default: Private Subnet Application Availability Zone 4
      PrivateDBSubnetsEnabled:
        default: Database tier
      PrivateDBSubnetAZ1CIDR:
        default: Private Subnet Database Availability Zone 1
      PrivateDBSubnetAZ2CIDR:
        default: Private Subnet Database Availability Zone 2
      PrivateDBSubnetAZ3CIDR:
        default: Private Subnet Database Availability Zone 3
      PrivateDBSubnetAZ4CIDR:
        default: Private Subnet Database Availability Zone 4
      DBTCPPortNumber:
        default: TCP/IP port number used in DB
      PrivateSpareSubnetsEnabled:
        default: Spare tier
      PrivateSpareSubnetAZ1CIDR:
        default: Private Subnet Spare Availability Zone 1
      PrivateSpareSubnetAZ2CIDR:
        default: Private Subnet Spare Availability Zone 2
      PrivateSpareSubnetAZ3CIDR:
        default: Private Subnet Spare Availability Zone 3
      PrivateSpareSubnetAZ4CIDR:
        default: Private Subnet Spare Availability Zone 4
      Owner:
        default: Team or Individual Owner


##########################################  M A P P I N G S ##########################################
#Mappings:



##########################################  C O N D I T I O N S ##########################################
Conditions:
  
  #ALB1:
  ALBEnabled: !Equals [!Ref PublicAlbSubnetsEnabled, "true"]
  
  #App1:
  #App1SubnetsInternetRouteEnabled: !Equals [!Ref App1SubnetsInternetRoute, "true"]
  #App1SubnetsPrivateLinkEndpointsEnabled: !Equals [!Ref App1SubnetsPrivateLinkEndpoints, "true"]
  
  #Shared1:
  SharedEnabled:  !Equals [!Ref PublicSharedSubnetsEnabled, "true"]

  #DB1:
  DBEnabled: !Equals [!Ref PrivateDBSubnetsEnabled, "true"]
  


##########################################  R E S O U R C E S ##########################################
Resources:

  ############## Create VPC ##############
  # projectName-environmentName-aws:region-vpc
  # ej. project-dev-us-east-1-vpc
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
      CidrBlock: !Ref VpcIPv4CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "vpc" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  IPv6CidrBlock:
    #IPv6 for VPC: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html
    Type: AWS::EC2::VPCCidrBlock
    Properties:
        AmazonProvidedIpv6CidrBlock: true
        VpcId: !Ref VPC

  ############## Create Subnet ##############
  # projectName-environmentName-aws-availabilityZone1-public-subnet
  # ej. project-dev-us-east-1a-public-subnet-alb
  PublicAlbSubnetAZ1:
    Condition: ALBEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Type: 'AWS::EC2::Subnet'
    DependsOn: 
    - VPC
    - IPv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone1" #!Select [0, Fn::GetAZs: !Ref 'AWS::Region']
      #AvailabilityZoneId: "String"
      #CidrBlock: !Select [ 1, Fn::Cidr: [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      CidrBlock: !Ref PublicAlbSubnetAZ1CIDR
      #EnableDns64: false
      #Ipv6CidrBlock: !Select [ 1, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], !Ref VPCNumberOfIPv6Subnets, !Ref VPCSubnetIPv6Size ]]
      Ipv6CidrBlock: !Select [ 128, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      #Ipv6Native: false
      #MapPublicIpOnLaunch: true
      #OutpostArn: "String"     
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "public-subnet-alb" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone2-public-subnet
  # ej. project-dev-us-east-1b-public-subnet-alb
  PublicAlbSubnetAZ2:
    Condition: ALBEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Type: 'AWS::EC2::Subnet'
    DependsOn: 
    - VPC
    - IPv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone2"
      CidrBlock: !Ref PublicAlbSubnetAZ2CIDR
      Ipv6CidrBlock: !Select [ 132, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "public-subnet-alb" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone3-public-subnet
  # ej. project-dev-us-east-1c-public-subnet-alb
  PublicAlbSubnetAZ3:
    Condition: ALBEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Type: 'AWS::EC2::Subnet'
    DependsOn: 
    - VPC
    - IPv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone3"
      CidrBlock: !Ref PublicAlbSubnetAZ3CIDR      
      Ipv6CidrBlock: !Select [ 136, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone3", "public-subnet-alb" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName        

  # projectName-environmentName-aws-availabilityZone4-public-subnet
  # ej. project-dev-us-east-1d-public-subnet-alb
  PublicAlbSubnetAZ4:
    Condition: ALBEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Type: 'AWS::EC2::Subnet'
    DependsOn: 
    - VPC
    - IPv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone4"
      CidrBlock: !Ref PublicAlbSubnetAZ4CIDR
      Ipv6CidrBlock: !Select [ 140, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]] 
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone4", "public-subnet-alb" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  # projectName-environmentName-aws-availabilityZone1-public-subnet
  # ej. project-dev-us-east-1a-public-subnet-shared
  PublicSharedSubnetAZ1:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Type: 'AWS::EC2::Subnet'
    DependsOn: 
    - VPC
    - IPv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone1"
      CidrBlock: !Ref PublicSharedSubnetAZ1CIDR
      Ipv6CidrBlock: !Select [ 144, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]  
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "public-subnet-shared" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  # projectName-environmentName-aws-availabilityZone2-public-subnet
  # ej. project-dev-us-east-1b-public-subnet-shared
  PublicSharedSubnetAZ2:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Type: 'AWS::EC2::Subnet'
    DependsOn: 
    - VPC
    - IPv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone2"
      CidrBlock: !Ref PublicSharedSubnetAZ2CIDR
      Ipv6CidrBlock: !Select [ 152, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]     
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "public-subnet-shared" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone3-public-subnet-shared
  # ej. project-dev-us-east-1c-public-subnet-shared
  PublicSharedSubnetAZ3:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Type: 'AWS::EC2::Subnet'
    DependsOn: 
    - VPC
    - IPv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone3"
      CidrBlock: !Ref PublicSharedSubnetAZ3CIDR
      Ipv6CidrBlock: !Select [ 160, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]  
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone3", "public-subnet-shared" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName        

  # projectName-environmentName-aws-availabilityZone4-public-subnet
  # ej. project-dev-us-east-1d-public-subnet-shared
  PublicSharedSubnetAZ4:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Type: 'AWS::EC2::Subnet'
    DependsOn: 
    - VPC
    - IPv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone4"
      CidrBlock: !Ref PublicSharedSubnetAZ4CIDR
      Ipv6CidrBlock: !Select [ 168, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]  
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone4", "public-subnet-shared" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone1-private-subnet-app
  # ej. project-dev-us-east-1a-private-subnet-app
  PrivateAppSubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: 
    - VPC
    - IPv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone1"
      CidrBlock: !Ref PrivateAppSubnetAZ1CIDR
      Ipv6CidrBlock: !Select [ 0, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "private-subnet-app" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
   
  # projectName-environmentName-aws-availabilityZone2-private-subnet-app
  # ej. project-dev-us-east-1b-private-subnet-app
  PrivateAppSubnetAZ2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: 
    - VPC
    - IPv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone2"
      CidrBlock: !Ref PrivateAppSubnetAZ2CIDR
      Ipv6CidrBlock: !Select [ 32, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "private-subnet-app" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone2-private-subnet-app
  # ej. project-dev-us-east-1c-private-subnet-app
  PrivateAppSubnetAZ3:
    Type: 'AWS::EC2::Subnet'
    DependsOn: 
    - VPC
    - IPv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone3"
      CidrBlock: !Ref PrivateAppSubnetAZ3CIDR
      Ipv6CidrBlock: !Select [ 64, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone3", "private-subnet-app" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone2-private-subnet-app
  # ej. project-dev-us-east-1f-private-subnet-app
  PrivateAppSubnetAZ4:
    Type: 'AWS::EC2::Subnet'
    DependsOn: 
    - VPC
    - IPv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone4"
      CidrBlock: !Ref PrivateAppSubnetAZ4CIDR
      Ipv6CidrBlock: !Select [ 96, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone4", "private-subnet-app" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone1-private-subnet-db
  # ej. project-dev-us-east-1a-private-subnet-db
  PrivateDBSubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone1"
      CidrBlock: !Ref PrivateDBSubnetAZ1CIDR
      Ipv6CidrBlock: !Select [ 192, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "private-subnet-db" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  # projectName-environmentName-aws-availabilityZone2-private-subnet-db
  # ej. project-dev-us-east-1b-private-subnet-db
  PrivateDBSubnetAZ2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone2"
      CidrBlock: !Ref PrivateDBSubnetAZ2CIDR
      Ipv6CidrBlock: !Select [ 200, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name    
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "private-subnet-db" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone3-private-subnet-db
  # ej. project-dev-us-east-1c-private-subnet-db
  PrivateDBSubnetAZ3:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone3"
      CidrBlock: !Ref PrivateDBSubnetAZ3CIDR
      Ipv6CidrBlock: !Select [ 208, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name    
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone3", "private-subnet-db" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone4-private-subnet-db
  # ej. project-dev-us-east-1d-private-subnet-db
  PrivateDBSubnetAZ4:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone4"
      CidrBlock: !Ref PrivateDBSubnetAZ4CIDR
      Ipv6CidrBlock: !Select [ 216, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name    
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone4", "private-subnet-db" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone1-private-subnet-spare
  # ej. project-dev-us-east-1a-private-subnet-spare
  PrivateSpareSubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone1"
      CidrBlock: !Ref PrivateSpareSubnetAZ1CIDR
      Ipv6CidrBlock: !Select [ 224, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "private-subnet-spare" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  # projectName-environmentName-aws-availabilityZone2-private-subnet-spare
  # ej. project-dev-us-east-1b-private-subnet-spare
  PrivateSpareSubnetAZ2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone2"
      CidrBlock: !Ref PrivateSpareSubnetAZ2CIDR
      Ipv6CidrBlock: !Select [ 232, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name    
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "private-subnet-spare" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone3-private-subnet-spare
  # ej. project-dev-us-east-1c-private-subnet-spare
  PrivateSpareSubnetAZ3:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone3"
      CidrBlock: !Ref PrivateSpareSubnetAZ3CIDR
      Ipv6CidrBlock: !Select [ 240, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name    
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone3", "private-subnet-spare" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone4-private-subnet-spare
  # ej. project-dev-us-east-1d-private-subnet-spare
  PrivateSpareSubnetAZ4:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Ref "AvailabilityZone4"
      CidrBlock: !Ref PrivateSpareSubnetAZ4CIDR
      Ipv6CidrBlock: !Select [ 248, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name    
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone4", "private-subnet-spare" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  ############## VPC Flow Log ##############
  # projectName-environmentName-aws:region-vpc-flowlog-group
  # ej. project-dev-us-east-1-vpc-flowlog-group
  VPCFlowLogGroup:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: Delete
    Properties:
      #We omit LogGroupName so a unique one is generated
      #LogGroupName:
      RetentionInDays: !Ref VPCFlowLogRetention
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "vpc-flowlog-group" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  # projectName-environmentName-aws:region-vpc-flowlog-role
  # ej. project-dev-us-east-1-vpc-flowlog-role
  VPCFlowLogRole:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "vpc-flowlog-role" ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      #PermissionsBoundary:
      Policies:
        - PolicyName: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "vpc-flowlog-policy" ] ]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-VPCFlowLogGroup-*'
                #"Resource": "arn:aws:logs:us-east-1:247265483558:log-group:demo-VPCFlowLogGroup-*",
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "vpc-flowlog-role" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws:region-vpc-flowlog
  # ej. project-dev-us-east-1-vpc-flowlog
  VPCFlowLog:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-flowlog.html
    Type: "AWS::EC2::FlowLog"
    DependsOn: 
    - VPCFlowLogGroup
    - VPCFlowLogRole
    Properties:
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogRole.Arn
      #LogDestination
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref VPCFlowLogGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "vpc-flowlog" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  ############## Create Internet Gateway ##############
  # projectName-environmentName-aws:region-igw
  # ej. project-dev-us-east-1-igw
  InternetGateway:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "igw" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  ############## Attachment Internet Gateway ##############
  VPCGatewayAttachment:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
    - InternetGateway
    - VPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  InternetGatewayEgressOnlyv6:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      VpcId: !Ref VPC

  ############## Create Route Table Public ##############
  # StackName-environmentName-public-rtb
  # ej. project-dev-public-rtb
  RouteTablePublic: # should be RouteTableAPublic, but logical id was not changed for backward compatibility
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, "public-rtb" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTablePublicInternetRoute: # should be RouteTablePublicAInternetRoute, but logical id was not changed for backward compatibility
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
    Type: 'AWS::EC2::Route'
    DependsOn: 
    - VPCGatewayAttachment
    - RouteTablePublic
    Properties:
      #CarrierGatewayId
      DestinationCidrBlock: '0.0.0.0/0'
      #DestinationIpv6CidrBlock: ::/0
      #EgressOnlyInternetGatewayId
      GatewayId: !Ref InternetGateway
      #InstanceId
      #LocalGatewayId
      #NatGatewayId
      #NetworkInterfaceId
      RouteTableId: !Ref RouteTablePublic
      #TransitGatewayId
      #VpcEndpoint
      #VpcPeeringConnectionId

  RouteTablePublicInternetRoutev6:
    Type: AWS::EC2::Route
    DependsOn:
    - InternetGatewayEgressOnlyv6
    - RouteTablePublic
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref RouteTablePublic
      EgressOnlyInternetGatewayId: !Ref InternetGatewayEgressOnlyv6

  # Route Table Subnet Associations
  RouteTableAssociationPublicAlbAZ1:
    Condition: ALBEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicAlbSubnetAZ1
    - RouteTablePublic
    Properties:
      SubnetId: !Ref PublicAlbSubnetAZ1
      RouteTableId: !Ref RouteTablePublic
  
  RouteTableAssociationPublicAlbAZ2:
    Condition: ALBEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicAlbSubnetAZ2
    - RouteTablePublic
    Properties:
      SubnetId: !Ref PublicAlbSubnetAZ2
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssociationPublicAlbAZ3:
    Condition: ALBEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicAlbSubnetAZ3
    - RouteTablePublic
    Properties:
      SubnetId: !Ref PublicAlbSubnetAZ3
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssociationPublicAlbAZ4:
    Condition: ALBEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicAlbSubnetAZ4
    - RouteTablePublic
    Properties:
      SubnetId: !Ref PublicAlbSubnetAZ4
      RouteTableId: !Ref RouteTablePublic

  # StackName-environmentName-availabilityZone1-public-rtb
  # ej. project-dev-us-east-1a-public-shared-rtb
  RouteTablePublicSharedAZ1:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "public-shared-rtb" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTablePublicSharedInternetRouteAZ1:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
    Type: 'AWS::EC2::Route'
    DependsOn: 
    - VPCGatewayAttachment
    - RouteTablePublicSharedAZ1
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublicSharedAZ1

  RouteTablePublicSharedInternetRoutev6AZ1:
    Condition: SharedEnabled
    Type: AWS::EC2::Route
    DependsOn:
    - InternetGatewayEgressOnlyv6
    - RouteTablePublicSharedAZ1
    Properties:
      DestinationIpv6CidrBlock: ::/0      
      EgressOnlyInternetGatewayId: !Ref InternetGatewayEgressOnlyv6
      RouteTableId: !Ref RouteTablePublicSharedAZ1

  RouteTableAssociationPublicSharedAZ1:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicSharedSubnetAZ1
    - RouteTablePublicSharedAZ1
    Properties:
      SubnetId: !Ref PublicSharedSubnetAZ1
      RouteTableId: !Ref RouteTablePublicSharedAZ1

  # StackName-environmentName-availabilityZone1-public-rtb
  # ej. project-dev-us-east-1a-public-shared-rtb
  RouteTablePublicSharedAZ2:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "public-shared-rtb" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTablePublicSharedInternetRouteAZ2:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
    Type: 'AWS::EC2::Route'
    DependsOn: 
    - VPCGatewayAttachment
    - RouteTablePublicSharedAZ2
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublicSharedAZ2

  RouteTablePublicSharedInternetRoutev6AZ2:
    Condition: SharedEnabled
    Type: AWS::EC2::Route
    DependsOn:
    - InternetGatewayEgressOnlyv6
    - RouteTablePublicSharedAZ2
    Properties:
      DestinationIpv6CidrBlock: ::/0      
      EgressOnlyInternetGatewayId: !Ref InternetGatewayEgressOnlyv6
      RouteTableId: !Ref RouteTablePublicSharedAZ2

  RouteTableAssociationPublicSharedAZ2:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicSharedSubnetAZ2
    - RouteTablePublicSharedAZ2
    Properties:
      SubnetId: !Ref PublicSharedSubnetAZ2
      RouteTableId: !Ref RouteTablePublicSharedAZ2
  
  # StackName-environmentName-availabilityZone3-public-rtb
  # ej. project-dev-us-east-1c-public-shared-rtb
  RouteTablePublicSharedAZ3:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone3", "public-shared-rtb" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTablePublicSharedInternetRouteAZ3:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
    Type: 'AWS::EC2::Route'
    DependsOn: 
    - VPCGatewayAttachment
    - RouteTablePublicSharedAZ3
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublicSharedAZ3

  RouteTablePublicSharedInternetRoutev6AZ3:
    Condition: SharedEnabled
    Type: AWS::EC2::Route
    DependsOn:
    - InternetGatewayEgressOnlyv6
    - RouteTablePublicSharedAZ3
    Properties:
      DestinationIpv6CidrBlock: ::/0      
      EgressOnlyInternetGatewayId: !Ref InternetGatewayEgressOnlyv6
      RouteTableId: !Ref RouteTablePublicSharedAZ3

  RouteTableAssociationPublicSharedAZ3:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicSharedSubnetAZ3
    - RouteTablePublicSharedAZ3
    Properties:
      SubnetId: !Ref PublicSharedSubnetAZ3
      RouteTableId: !Ref RouteTablePublicSharedAZ3

  # StackName-environmentName-availabilityZone4-public-rtb
  # ej. project-dev-us-east-1d-public-shared-rtb
  RouteTablePublicSharedAZ4:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone4", "public-shared-rtb" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTablePublicSharedInternetRouteAZ4:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
    Type: 'AWS::EC2::Route'
    DependsOn: 
    - VPCGatewayAttachment
    - RouteTablePublicSharedAZ4
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublicSharedAZ4

  RouteTablePublicSharedInternetRoutev6AZ4:
    Condition: SharedEnabled
    Type: AWS::EC2::Route
    DependsOn:
    - InternetGatewayEgressOnlyv6
    - RouteTablePublicSharedAZ4
    Properties:
      DestinationIpv6CidrBlock: ::/0      
      EgressOnlyInternetGatewayId: !Ref InternetGatewayEgressOnlyv6
      RouteTableId: !Ref RouteTablePublicSharedAZ4

  RouteTableAssociationPublicSharedAZ4:
    Condition: SharedEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicSharedSubnetAZ4
    - RouteTablePublicSharedAZ4
    Properties:
      SubnetId: !Ref PublicSharedSubnetAZ4
      RouteTableId: !Ref RouteTablePublicSharedAZ4

  # The NAT IP for the public shared subnet, as seen from within the public one
  # ej. project-dev-us-east-1a-public-shared-ip
  SharedNatEIP1:
    Condition: SharedEnabled
    Type: AWS::EC2::EIP
    DependsOn:
    - VPCGatewayAttachment
    Properties:
      Domain: vpc
      #InstanceId: "String"
      #NetworkBorderGroup: "String"
      #PublicIpv4Pool: "String"
      #TransferAddress: "String"
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "public-shared-ip" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # ej. project-dev-us-east-1b-public-shared-ip
  SharedNatEIP2:
    Condition: SharedEnabled
    Type: AWS::EC2::EIP
    DependsOn:
    - VPCGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "public-shared-ip" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # ej. project-dev-us-east-1c-public-shared-ip
  SharedNatEIP3:
    Condition: SharedEnabled
    Type: AWS::EC2::EIP
    DependsOn:
    - VPCGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone3", "public-shared-ip" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # ej. project-dev-us-east-1d-public-shared-ip
  SharedNatEIP4:
    Condition: SharedEnabled
    Type: AWS::EC2::EIP
    DependsOn:
    - VPCGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone4", "public-shared-ip" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  ############## Create NAT Gateway ##############
  # The NAT gateway for the private subnet
  # ej. project-dev-us-east-1a-nat-gw
  NATGateway1:
    Condition: SharedEnabled
    Type: AWS::EC2::NatGateway
    DependsOn: 
    - VPCGatewayAttachment
    - PublicSharedSubnetAZ1
    Properties:
      AllocationId: !GetAtt SharedNatEIP1.AllocationId
      SubnetId: !Ref PublicSharedSubnetAZ1
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "nat-gw" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  # ej. project-dev-us-east-1b-nat-gw
  NATGateway2:
    Condition: SharedEnabled
    Type: AWS::EC2::NatGateway
    DependsOn: 
    - VPCGatewayAttachment
    - PublicSharedSubnetAZ2
    Properties:
      AllocationId: !GetAtt SharedNatEIP2.AllocationId
      SubnetId: !Ref PublicSharedSubnetAZ2
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "nat-gw" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # ej. project-dev-us-east-1c-nat-gw
  NATGateway3:
    Condition: SharedEnabled
    Type: AWS::EC2::NatGateway
    DependsOn: 
    - VPCGatewayAttachment
    - PublicSharedSubnetAZ3
    Properties:
      AllocationId: !GetAtt SharedNatEIP3.AllocationId
      SubnetId: !Ref PublicSharedSubnetAZ3
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone3", "nat-gw" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # ej. project-dev-us-east-1d-nat-gw
  NATGateway4:
    Condition: SharedEnabled
    Type: AWS::EC2::NatGateway
    DependsOn: 
    - VPCGatewayAttachment
    - PublicSharedSubnetAZ4
    Properties:
      AllocationId: !GetAtt SharedNatEIP4.AllocationId
      SubnetId: !Ref PublicSharedSubnetAZ4
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone4", "nat-gw" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  ############## Create Route Table Private ##############
  # StackName-environmentName-aws:availabilityZone1-private1-rtb
  # ej. project-dev-us-east-1a-private-app-rtb
  RouteTablePrivateAppAZ1:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone1, "private-app-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  RouteTablePrivateAppInternetRouteAZ1:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
    Type: 'AWS::EC2::Route'
    DependsOn:
    - RouteTablePrivateAppAZ1
    - NATGateway1
    Properties:
      RouteTableId: !Ref RouteTablePrivateAppAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  RouteTablePrivateAppInternetRoutev6AZ1:
    Type: AWS::EC2::Route
    DependsOn:
    - InternetGatewayEgressOnlyv6
    - RouteTablePrivateAppAZ1
    Properties:
      DestinationIpv6CidrBlock: ::/0      
      EgressOnlyInternetGatewayId: !Ref InternetGatewayEgressOnlyv6
      RouteTableId: !Ref RouteTablePrivateAppAZ1

  RouteTableAssociationPrivateAppAZ1:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateAppSubnetAZ1
    - RouteTablePrivateAppAZ1
    Properties:
      SubnetId: !Ref PrivateAppSubnetAZ1
      RouteTableId: !Ref RouteTablePrivateAppAZ1
  
  # ej. project-dev-us-east-1b-private-app-rtb
  RouteTablePrivateAppAZ2:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone2, "private-app-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  RouteTablePrivateAppInternetRouteAZ2:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
    Type: 'AWS::EC2::Route'
    DependsOn:
    - RouteTablePrivateAppAZ2
    - NATGateway2
    Properties:
      RouteTableId: !Ref RouteTablePrivateAppAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  RouteTablePrivateAppInternetRoutev6AZ2:
    Type: AWS::EC2::Route
    DependsOn:
    - InternetGatewayEgressOnlyv6
    - RouteTablePrivateAppAZ2
    Properties:
      DestinationIpv6CidrBlock: ::/0      
      EgressOnlyInternetGatewayId: !Ref InternetGatewayEgressOnlyv6
      RouteTableId: !Ref RouteTablePrivateAppAZ2

  RouteTableAssociationPrivateAppAZ2:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateAppSubnetAZ2
    - RouteTablePrivateAppAZ2
    Properties:
      SubnetId: !Ref PrivateAppSubnetAZ2
      RouteTableId: !Ref RouteTablePrivateAppAZ2

  # ej. project-dev-us-east-1c-private-app-rtb
  RouteTablePrivateAppAZ3:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone3, "private-app-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  RouteTablePrivateAppInternetRouteAZ3:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
    Type: 'AWS::EC2::Route'
    DependsOn:
    - RouteTablePrivateAppAZ3
    - NATGateway3
    Properties:
      RouteTableId: !Ref RouteTablePrivateAppAZ3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway3

  RouteTablePrivateAppInternetRoutev6AZ3:
    Type: AWS::EC2::Route
    DependsOn:
    - InternetGatewayEgressOnlyv6
    - RouteTablePrivateAppAZ3
    Properties:
      DestinationIpv6CidrBlock: ::/0      
      EgressOnlyInternetGatewayId: !Ref InternetGatewayEgressOnlyv6
      RouteTableId: !Ref RouteTablePrivateAppAZ3

  RouteTableAssociationPrivateAppAZ3:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateAppSubnetAZ3
    - RouteTablePrivateAppAZ3
    Properties:
      SubnetId: !Ref PrivateAppSubnetAZ3
      RouteTableId: !Ref RouteTablePrivateAppAZ3

  # ej. project-dev-us-east-1d-private-app-rtb
  RouteTablePrivateAppAZ4:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone4, "private-app-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  RouteTablePrivateAppInternetRouteAZ4:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
    Type: 'AWS::EC2::Route'
    DependsOn:
    - RouteTablePrivateAppAZ4
    - NATGateway4
    Properties:
      RouteTableId: !Ref RouteTablePrivateAppAZ4
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway4

  RouteTablePrivateAppInternetRoutev6AZ4:
    Type: AWS::EC2::Route
    DependsOn:
    - InternetGatewayEgressOnlyv6
    - RouteTablePrivateAppAZ4
    Properties:
      DestinationIpv6CidrBlock: ::/0      
      EgressOnlyInternetGatewayId: !Ref InternetGatewayEgressOnlyv6
      RouteTableId: !Ref RouteTablePrivateAppAZ4

  RouteTableAssociationPrivateAppAZ4:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateAppSubnetAZ4
    - RouteTablePrivateAppAZ4
    Properties:
      SubnetId: !Ref PrivateAppSubnetAZ4
      RouteTableId: !Ref RouteTablePrivateAppAZ4

  # StackName-environmentName-aws:availabilityZone1-private-db-rtb
  # ej. project-dev-us-east-1a-private-db-rtb
  RouteTablePrivateDBAZ1:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone1, "private-db-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTableAssociationPrivateDBAZ1:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateDBSubnetAZ1
    - RouteTablePrivateDBAZ1
    Properties:
      SubnetId: !Ref PrivateDBSubnetAZ1
      RouteTableId: !Ref RouteTablePrivateDBAZ1

  # StackName-environmentName-aws:availabilityZone2-private-db-rtb
  # ej. project-dev-us-east-1b-private-db-rtb
  RouteTablePrivateDBAZ2:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone2, "private-db-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTableAssociationPrivateDBAZ2:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateDBSubnetAZ2
    - RouteTablePrivateDBAZ2
    Properties:
      SubnetId: !Ref PrivateDBSubnetAZ2
      RouteTableId: !Ref RouteTablePrivateDBAZ2

  # StackName-environmentName-aws:availabilityZone3-private-db-rtb
  # ej. project-dev-us-east-1c-private-db-rtb
  RouteTablePrivateDBAZ3:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone3, "private-db-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTableAssociationPrivateDBAZ3:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateDBSubnetAZ3
    - RouteTablePrivateDBAZ3
    Properties:
      SubnetId: !Ref PrivateDBSubnetAZ3
      RouteTableId: !Ref RouteTablePrivateDBAZ3

  # StackName-environmentName-aws:availabilityZone4-private-db-rtb
  # ej. project-dev-us-east-1d-private-db-rtb
  RouteTablePrivateDBAZ4:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone4, "private-db-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTableAssociationPrivateDBAZ4:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateDBSubnetAZ4
    - RouteTablePrivateDBAZ4
    Properties:
      SubnetId: !Ref PrivateDBSubnetAZ4
      RouteTableId: !Ref RouteTablePrivateDBAZ4

  # StackName-environmentName-aws:availabilityZone1-private-spare-rtb
  # ej. project-dev-us-east-1a-private-spare-rtb
  RouteTablePrivateSpareAZ1:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone1, "private-spare-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTableAssociationPrivateSpareAZ1:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateSpareSubnetAZ1
    - RouteTablePrivateSpareAZ1
    Properties:
      SubnetId: !Ref PrivateSpareSubnetAZ1
      RouteTableId: !Ref RouteTablePrivateSpareAZ1

  # StackName-environmentName-aws:availabilityZone2-private-spare-rtb
  # ej. project-dev-us-east-1b-private-spare-rtb
  RouteTablePrivateSpareAZ2:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone2, "private-spare-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTableAssociationPrivateSpareAZ2:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateSpareSubnetAZ2
    - RouteTablePrivateSpareAZ2
    Properties:
      SubnetId: !Ref PrivateSpareSubnetAZ2
      RouteTableId: !Ref RouteTablePrivateSpareAZ2

  # StackName-environmentName-aws:availabilityZone3-private-spare-rtb
  # ej. project-dev-us-east-1c-private-spare-rtb
  RouteTablePrivateSpareAZ3:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone3, "private-spare-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTableAssociationPrivateSpareAZ3:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateSpareSubnetAZ3
    - RouteTablePrivateSpareAZ3
    Properties:
      SubnetId: !Ref PrivateSpareSubnetAZ3
      RouteTableId: !Ref RouteTablePrivateSpareAZ3

  # StackName-environmentName-aws:availabilityZone4-private-spare-rtb
  # ej. project-dev-us-east-1d-private-spare-rtb
  RouteTablePrivateSpareAZ4:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone4, "private-spare-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTableAssociationPrivateSpareAZ4:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetroutetableassociation.html
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateSpareSubnetAZ4
    - RouteTablePrivateSpareAZ4
    Properties:
      SubnetId: !Ref PrivateSpareSubnetAZ4
      RouteTableId: !Ref RouteTablePrivateSpareAZ4

  ############## Public Network ACL ##############
  # StackName-environmentName-aws:region-public-alb-nacl
  # ej. project-dev-us-east-1-public-alb-nacl
  PublicAlbNetworkAcl:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "public-alb-nacl" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Network
        Value: public

  InboundPublicAlbNetworkAclEntryAllowHTTP:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: 'false'
      #Ipv6CidrBlock: "Number"
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '200'
  
  InboundPublicAlbNetworkAclEntryv6AllowHTTP:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      #CidrBlock: '0.0.0.0/0'
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '205'

  InboundPublicAlbNetworkAclEntryAllowHTTPS:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: 'false'
      #Ipv6CidrBlock: "Number"
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '300'
  
  InboundPublicAlbNetworkAclEntryv6AllowHTTPS:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      #CidrBlock: '0.0.0.0/0'
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '305'

  InboundPublicAlbNetworkAclEntryDenyMssql:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      #Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '1433'
        To: '1433'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '800'
  
  InboundPublicAlbNetworkAclEntryv6DenyMssql:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      #CidrBlock: 0.0.0.0/0
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '1433'
        To: '1433'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '805'

  InboundPublicAlbNetworkAclEntryDenyOracle:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      #Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '1521'
        To: '1521'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '810'
  
  InboundPublicAlbNetworkAclEntryv6DenyOracle:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      #CidrBlock: 0.0.0.0/0
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '1521'
        To: '1521'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '815'      

  InboundPublicAlbNetworkAclEntryDenyMysql:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      #Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '3306'
        To: '3306'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '820'
  
  InboundPublicAlbNetworkAclEntryv6DenyMysql:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      #CidrBlock: 0.0.0.0/0
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '3306'
        To: '3306'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '825'
      
  InboundPublicAlbNetworkAclEntryDenyNfs:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      #Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '2049'
        To: '2049'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '830'
  
  InboundPublicAlbNetworkAclEntryv6DenyNfs:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      #CidrBlock: 0.0.0.0/0
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '2049'
        To: '2049'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '835'

  InboundPublicAlbNetworkAclEntryDenyRdp:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      #Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '3389'
        To: '3389'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '840'
  
  InboundPublicAlbNetworkAclEntryv6DenyRdp:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      #CidrBlock: 0.0.0.0/0
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '3389'
        To: '3389'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '845'      
      
  InboundPublicAlbNetworkAclEntryDenyPostgre:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      #Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '5432'
        To: '5432'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '850'
  
  InboundPublicAlbNetworkAclEntryv6DenyPostgre:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      #CidrBlock: 0.0.0.0/0
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '5432'
        To: '5432'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '855'

  InboundPublicAlbNetworkAclEntryDeny8080:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      #Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '8080'
        To: '8080'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '860'
  
  InboundPublicAlbNetworkAclEntryv6Deny8080:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      #CidrBlock: 0.0.0.0/0
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '8080'
        To: '8080'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '865'

  InboundPublicAlbNetworkAclEntryDeny8443:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      #Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '8443'
        To: '8443'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '870'
  
  InboundPublicAlbNetworkAclEntryv6Deny8443:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      #CidrBlock: 0.0.0.0/0
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '8443'
        To: '8443'
      Protocol: '6'
      RuleAction: deny
      RuleNumber: '875'

  InboundEphemeralVPCAlbNetworkAclEntryAllowAll1:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ1CIDR
      Egress: 'false'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1100'

  InboundEphemeralVPCAlbNetworkAclEntryv6AllowAll1:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: !Select [ 0, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1105'

  InboundEphemeralVPCAlbNetworkAclEntryAllowAll2:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ2CIDR
      Egress: 'false'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1200'

  InboundEphemeralVPCAlbNetworkAclEntryv6AllowAll2:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: !Select [ 32, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1205'

  InboundEphemeralVPCAlbNetworkAclEntryAllowAll3:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ3CIDR
      Egress: 'false'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1300'

  InboundEphemeralVPCAlbNetworkAclEntryv6AllowAll3:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: !Select [ 64, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1305'

  InboundEphemeralVPCAlbNetworkAclEntryAllowAll4:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ4CIDR
      Egress: 'false'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1400'

  InboundEphemeralVPCAlbNetworkAclEntryv6AllowAll4:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: !Select [ 96, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1405'

  OutboundEphemeralAlbNetworkAclEntryAllowAll:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1000'

  OutboundEphemeralAlbNetworkAclEntryv6AllowAll:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicAlbNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1005'

  OutboundVPCNetworkAclEntryAllowHTTP1:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ1CIDR
      Egress: 'true'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1100'
  
  OutboundVPCNetworkAclEntryv6AllowHTTP1:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: !Select [ 0, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1105'

  OutboundVPCNetworkAclEntryAllowHTTP2:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ2CIDR
      Egress: 'true'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1200'
  
  OutboundVPCNetworkAclEntryv6AllowHTTP2:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: !Select [ 32, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1205'

  OutboundVPCNetworkAclEntryAllowHTTP3:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ3CIDR
      Egress: 'true'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1300'
  
  OutboundVPCNetworkAclEntryv6AllowHTTP3:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: !Select [ 64, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1305'

  OutboundVPCNetworkAclEntryAllowHTTP4:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ4CIDR
      Egress: 'true'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1400'
  
  OutboundVPCNetworkAclEntryv6AllowHTTP4:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: !Select [ 96, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1405'

  OutboundVPCNetworkAclEntryAllowHTTPS1:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ1CIDR
      Egress: 'true'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '2100'
  
  OutboundVPCNetworkAclEntryv6AllowHTTPS1:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: !Select [ 0, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '2105'

  OutboundVPCNetworkAclEntryAllowHTTPS2:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ2CIDR
      Egress: 'true'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '2200'
  
  OutboundVPCNetworkAclEntryv6AllowHTTPS2:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: !Select [ 32, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '2205'

  OutboundVPCNetworkAclEntryAllowHTTPS3:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ3CIDR
      Egress: 'true'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '2300'
  
  OutboundVPCNetworkAclEntryv6AllowHTTPS3:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: !Select [ 64, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '2305'

  OutboundVPCNetworkAclEntryAllowHTTPS4:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ4CIDR
      Egress: 'true'
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '2400'
  
  OutboundVPCNetworkAclEntryv6AllowHTTPS4:
    Condition: ALBEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicAlbNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: !Select [ 96, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicAlbNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '2405'
  
  # Public Alb Subnet Association
  PublicAlbSubnetNetworkAclAssociation1:
    Condition: ALBEnabled
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicAlbSubnetAZ1
    - PublicAlbNetworkAcl
    Properties:
      SubnetId: !Ref PublicAlbSubnetAZ1
      NetworkAclId: !Ref PublicAlbNetworkAcl

  PublicAlbSubnetNetworkAclAssociation2:
    Condition: ALBEnabled
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicAlbSubnetAZ2
    - PublicAlbNetworkAcl
    Properties:
      SubnetId: !Ref PublicAlbSubnetAZ2
      NetworkAclId: !Ref PublicAlbNetworkAcl
  
  PublicAlbSubnetNetworkAclAssociation3:
    Condition: ALBEnabled
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicAlbSubnetAZ3
    - PublicAlbNetworkAcl
    Properties:
      SubnetId: !Ref PublicAlbSubnetAZ3
      NetworkAclId: !Ref PublicAlbNetworkAcl

  PublicAlbSubnetNetworkAclAssociation4:
    Condition: ALBEnabled
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicAlbSubnetAZ4
    - PublicAlbNetworkAcl
    Properties:
      SubnetId: !Ref PublicAlbSubnetAZ4
      NetworkAclId: !Ref PublicAlbNetworkAcl  

  # StackName-environmentName-aws:region-public-shared-nacl
  # ej. project-dev-us-east-1-public-alb-nacl
  PublicSharedNetworkAcl:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "public-shared-nacl" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Network
        Value: public

  InboundEphemeralSharedNetworkAclEntryAllowAll:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'

  InboundEphemeralSharedNetworkAclEntryv6AllowAll:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '105'

  InboundSharedAppNetworkAclEntryAllowAll1:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ1CIDR
      Egress: 'false'
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '200'

  InboundSharedAppNetworkAclEntryv6AllowAll1:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: !Select [ 0, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '205'
   
  InboundSharedAppNetworkAclEntryAllowAll2:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ2CIDR
      Egress: 'false'
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '250'

  InboundSharedAppNetworkAclEntryv6AllowAll2:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: !Select [ 32, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '255'

  InboundSharedAppNetworkAclEntryAllowAll3:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ3CIDR
      Egress: 'false'
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '300'

  InboundSharedAppNetworkAclEntryv6AllowAll3:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: !Select [ 64, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '305'

  InboundSharedAppNetworkAclEntryAllowAll4:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ4CIDR
      Egress: 'false'
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '350'

  InboundSharedAppNetworkAclEntryv6AllowAll4:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: !Select [ 96, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '355'

  OutboundEphemeralSharedNetworkAclEntryAllowAll:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
  
  OutboundEphemeralSharedNetworkAclEntryv6AllowAll:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '105'
  
  OutboundSharedNetworkAclEntryAllowHTTP:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '200'
  
  OutboundSharedNetworkAclEntryv6AllowHTTP:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '205'

  OutboundSharedNetworkAclEntryAllowHTTPS:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '300'
  
  OutboundSharedNetworkAclEntryv6AllowHTTPS:
    Condition: SharedEnabled
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PublicSharedNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PublicSharedNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '305'
  
  PublicSharedSubnetNetworkAclAssocation1:
    Condition: SharedEnabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
    - PublicSharedSubnetAZ1
    - PublicSharedNetworkAcl
    Properties:
      SubnetId: !Ref PublicSharedSubnetAZ1
      NetworkAclId: !Ref PublicSharedNetworkAcl
  
  PublicSharedSubnetNetworkAclAssocation2:
    Condition: SharedEnabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
    - PublicSharedSubnetAZ2
    - PublicSharedNetworkAcl
    Properties:
      SubnetId: !Ref PublicSharedSubnetAZ2
      NetworkAclId: !Ref PublicSharedNetworkAcl
  
  PublicSharedSubnetNetworkAclAssocation3:
    Condition: SharedEnabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
    - PublicSharedSubnetAZ3
    - PublicSharedNetworkAcl
    Properties:
      SubnetId: !Ref PublicSharedSubnetAZ3
      NetworkAclId: !Ref PublicSharedNetworkAcl

  PublicSharedSubnetNetworkAclAssocation4:
    Condition: SharedEnabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
    - PublicSharedSubnetAZ4
    - PublicSharedNetworkAcl
    Properties:
      SubnetId: !Ref PublicSharedSubnetAZ4
      NetworkAclId: !Ref PublicSharedNetworkAcl

  # StackName-environmentName-aws:region-private-app-nacl
  # ej. project-dev-us-east-1-private-app-nacl
  PrivateAppNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "private-app-nacl" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Network
        Value: private

  InboundAppNetworkAclEntryAllowHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn:
    - PrivateAppNetworkAcl
    Properties:
      CidrBlock: !Ref VpcIPv4CidrBlock
      Egress: 'false'
      NetworkAclId: !Ref PrivateAppNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'

  InboundAppNetworkAclEntryv6AllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PrivateAppNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]
      NetworkAclId: !Ref PrivateAppNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '105'

  InboundAppNetworkAclEntryAllowHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn:
    - PrivateAppNetworkAcl
    Properties:
      CidrBlock: !Ref VpcIPv4CidrBlock
      Egress: 'false'
      NetworkAclId: !Ref PrivateAppNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '150'

  InboundAppNetworkAclEntryv6AllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PrivateAppNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]
      NetworkAclId: !Ref PrivateAppNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '155'

  InboundEphemeralAppNetworkAclEntryAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PrivateAppNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId: !Ref PrivateAppNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '200'

  InboundEphemeralAppNetworkAclEntryv6AllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PrivateAppNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PrivateAppNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '205'

  OutboundAppNetworkAclEntryAllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PrivateAppNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId: !Ref PrivateAppNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
  
  OutboundAppNetworkAclEntryv6AllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PrivateAppNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PrivateAppNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '105'

  OutboundAppNetworkAclEntryAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PrivateAppNetworkAcl
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId: !Ref PrivateAppNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '150'
  
  OutboundAppNetworkAclEntryv6AllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PrivateAppNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: '::/0'
      NetworkAclId: !Ref PrivateAppNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '155'

  OutboundAppVPCNetworkAclEntryAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: 
    - PrivateAppNetworkAcl
    Properties:
      CidrBlock: !Ref VpcIPv4CidrBlock
      Egress: 'true'
      NetworkAclId: !Ref PrivateAppNetworkAcl
      PortRange:
        From: '1'
        To: '65535'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '200'

  OutboundAppVPCNetworkAclEntryv6AllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateAppNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]
      NetworkAclId: !Ref PrivateAppNetworkAcl
      PortRange:
        From: '1'
        To: '65535'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '205'

  PrivateAppSubnetNetworkAclAssocation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
    - PrivateAppSubnetAZ1
    - PrivateAppNetworkAcl
    Properties:
      SubnetId: !Ref PrivateAppSubnetAZ1
      NetworkAclId: !Ref PrivateAppNetworkAcl
  
  PrivateAppSubnetNetworkAclAssocation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
    - PrivateAppSubnetAZ2
    - PrivateAppNetworkAcl
    Properties:
      SubnetId: !Ref PrivateAppSubnetAZ2
      NetworkAclId: !Ref PrivateAppNetworkAcl

  PrivateAppSubnetNetworkAclAssocation3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
    - PrivateAppSubnetAZ3
    - PrivateAppNetworkAcl
    Properties:
      SubnetId: !Ref PrivateAppSubnetAZ3
      NetworkAclId: !Ref PrivateAppNetworkAcl

  PrivateAppSubnetNetworkAclAssocation4:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
    - PrivateAppSubnetAZ4
    - PrivateAppNetworkAcl
    Properties:
      SubnetId: !Ref PrivateAppSubnetAZ4
      NetworkAclId: !Ref PrivateAppNetworkAcl

  # StackName-environmentName-aws:region-private-db-nacl
  # ej. project-dev-us-east-1-private-db-nacl
  PrivateDBNetworkAcl:
    Condition: DBEnabled
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "private-db-nacl" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Network
        Value: private

  InboundDBNetworkAclEntryAllow1:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ1CIDR
      Egress: 'false'
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: !Ref DBTCPPortNumber
        To: !Ref DBTCPPortNumber
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
      
  InboundDBNetworkAclEntryv6Allow1:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: !Select [ 0, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: !Ref DBTCPPortNumber
        To: !Ref DBTCPPortNumber
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '105'

  InboundDBNetworkAclEntryAllow2:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ2CIDR
      Egress: 'false'
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: !Ref DBTCPPortNumber
        To: !Ref DBTCPPortNumber
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '150'

  InboundDBNetworkAclEntryv6Allow2:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: !Select [ 32, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: !Ref DBTCPPortNumber
        To: !Ref DBTCPPortNumber
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '155'

  InboundDBNetworkAclEntryAllow3:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ3CIDR
      Egress: 'false'
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: !Ref DBTCPPortNumber
        To: !Ref DBTCPPortNumber
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '200'

  InboundDBNetworkAclEntryv6Allow3:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: !Select [ 64, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: !Ref DBTCPPortNumber
        To: !Ref DBTCPPortNumber
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '205'

  InboundDBNetworkAclEntryAllow4:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ4CIDR
      Egress: 'false'
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: !Ref DBTCPPortNumber
        To: !Ref DBTCPPortNumber
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '250'

  InboundDBNetworkAclEntryv6Allow4:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      Egress: 'false'
      Ipv6CidrBlock: !Select [ 96, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: !Ref DBTCPPortNumber
        To: !Ref DBTCPPortNumber
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '255'

  OutboundDBNetworkAclEntryAllow1:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ1CIDR
      Egress: 'true'
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'

  OutboundDBNetworkAclEntryv6Allow1:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: !Select [ 0, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '105'
  
  OutboundDBNetworkAclEntryAllow2:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ2CIDR
      Egress: 'true'
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '150'

  OutboundDBNetworkAclEntryv6Allow2:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: !Select [ 32, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '155'

  OutboundDBNetworkAclEntryAllow3:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ3CIDR
      Egress: 'true'
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '200'

  OutboundDBNetworkAclEntryv6Allow3:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: !Select [ 64, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '205'

  OutboundDBNetworkAclEntryAllow4:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      CidrBlock: !Ref PrivateAppSubnetAZ4CIDR
      Egress: 'true'
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '250'

  OutboundDBNetworkAclEntryv6Allow4:
    Condition: DBEnabled
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: 
    - PrivateDBNetworkAcl
    Properties:
      Egress: 'true'
      Ipv6CidrBlock: !Select [ 96, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
      NetworkAclId: !Ref PrivateDBNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '255'   

  PrivateDBSubnetNetworkAclAssocation1:
    Condition: DBEnabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
    - PrivateDBSubnetAZ1
    - PrivateDBNetworkAcl
    Properties:
      SubnetId: !Ref PrivateDBSubnetAZ1
      NetworkAclId: !Ref PrivateDBNetworkAcl
  
  PrivateDBSubnetNetworkAclAssocation2:
    Condition: DBEnabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
    - PrivateDBSubnetAZ2
    - PrivateDBNetworkAcl
    Properties:
      SubnetId: !Ref PrivateDBSubnetAZ2
      NetworkAclId: !Ref PrivateDBNetworkAcl

  PrivateDBSubnetNetworkAclAssocation3:
    Condition: DBEnabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
    - PrivateDBSubnetAZ3
    - PrivateDBNetworkAcl
    Properties:
      SubnetId: !Ref PrivateDBSubnetAZ3
      NetworkAclId: !Ref PrivateDBNetworkAcl

  PrivateDBSubnetNetworkAclAssocation4:
    Condition: DBEnabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    DependsOn:
    - PrivateDBSubnetAZ4
    - PrivateDBNetworkAcl
    Properties:
      SubnetId: !Ref PrivateDBSubnetAZ4
      NetworkAclId: !Ref PrivateDBNetworkAcl

  ############## Security Groups ##############
  # StackName-environmentName-aws:region-endpoint-sg
  # ej. project-dev-us-east-1-endpoint-sg
  EndpointAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable access to endpoints'
      SecurityGroupIngress: 
      - CidrIp: !Ref PrivateAppSubnetAZ1CIDR
        #Description: "String"
        FromPort: '443'
        IpProtocol: "tcp"
        ToPort: '443'
        
      - CidrIpv6: !Select [ 0, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
        FromPort: '443'
        IpProtocol: "tcp"
        ToPort: '443'
          
      - CidrIp: !Ref PrivateAppSubnetAZ2CIDR
        FromPort: '443'
        IpProtocol: "tcp"
        ToPort: '443'
          
      - CidrIpv6: !Select [ 32, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
        FromPort: '443'
        IpProtocol: "tcp"
        ToPort: '443'
          
      - CidrIp: !Ref PrivateAppSubnetAZ3CIDR
        FromPort: '443'
        IpProtocol: "tcp"
        ToPort: '443'
          
      - CidrIpv6: !Select [ 64, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
        FromPort: '443'
        IpProtocol: "tcp"
        ToPort: '443'

      - CidrIp: !Ref PrivateAppSubnetAZ4CIDR
        FromPort: '443'
        IpProtocol: "tcp"
        ToPort: '443'
          
      - CidrIpv6: !Select [ 96, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
        FromPort: '443'
        IpProtocol: "tcp"
        ToPort: '443'
          
      VpcId: !Ref VPC
      Tags: 
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AWS::Region, "endpoint-sg" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # ej. project-dev-us-east-1-ssh-bastion-sg
  BastionSharedSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable access to SSH'
      SecurityGroupIngress: 
      - CidrIp: !Ref PrivateAppSubnetAZ1CIDR
        Description: "Allow SSH Access to Bastion"
        FromPort: '22'
        IpProtocol: "tcp"
        ToPort: '22'
        
      - CidrIpv6: !Select [ 0, Fn::Cidr: [ !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks], 256, 64 ]]
        FromPort: '22'
        IpProtocol: "tcp"
        ToPort: '22'
          
      VpcId: !Ref VPC
      Tags: 
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AWS::Region, "ssh-bastion-sg" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  ############## VPC Endpoints ##############
  # StackName-environmentName-aws:region-s3-gw-vpce
  # ej. project-dev-us-east-1-s3-gw-vpce
  S3GatewayVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: '*'
          Action: 's3:*'
          Resource: !Sub 'arn:${AWS::Partition}:s3:::*'
      RouteTableIds: 
        - !Ref RouteTablePrivateAppAZ1
        - !Ref RouteTablePrivateAppAZ2
        - !Ref RouteTablePrivateAppAZ3
        - !Ref RouteTablePrivateAppAZ4
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: 'Gateway'
      VpcId: !Ref VPC
      # Tags:
      # - Key: Name
      #   Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AWS::Region, "s3-gw-vpce" ] ]
      # - Key: Owner
      #   Value: !Ref Owner
      # - Key: Project
      #   Value: !Ref AWS::StackName
      # - Key: Environment
      #   Value: !Ref EnvironmentName

##########################################  T R A N S F O R M ##########################################  
#Transform:



##########################################  O U T P U T S ##########################################
Outputs:
  TemplateID:
    Description: 'germantorres.co template id.'
    Value: 'vpc/vpc-4azs-alb-app-db-nacl'
  TemplateVersion:
    Description: 'germantorres.co template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'