AWSTemplateFormatVersion: '2010-09-09'

Description: 'VPC: public and private subnets in two availability zones v20221115-1430'


##########################################  P A R A M E T E R S ##########################################
# The Parameters allow the user to pass custom settings to the stack before creation
Parameters:

  # Ownership
  Owner:
    Type: String
    Default: Team or Individual Owner

  # VPC
  VpcCIDR:
    Description: Enter the IP range (CIDR notation) for this VPC - 10.0.0.0/16 = 10.0.0.0-10.0.255.255 = 256 Subnets = 65534 hosts
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    MinLength: '10'
    MaxLength: '18'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.0.0/16

  # Subnets
  PublicASubnetAZ1CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.128.0/20
    MinLength: '10'
    MaxLength: '18'

  PublicASubnetAZ2CIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.144.0/20
    MinLength: '10'
    MaxLength: '18'

  PrivateASubnetAZ1CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.0.0/19
    MinLength: '10'
    MaxLength: '18'

  PrivateASubnetAZ2CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.32.0/19
    MinLength: '10'
    MaxLength: '18'

  PrivateBSubnetAZ1CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.192.0/21
    MinLength: '10'
    MaxLength: '18'

  PrivateBSubnetAZ2CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.0.200.0/21
    MinLength: '10'
    MaxLength: '18'

  # AvailabilityZone
  AvailabilityZone1:
    Description: The first availability zone in the region
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone
    #Default: !Select [0, !GetAZs '']
  
  AvailabilityZone2:
    Description: The second availability zone in the region
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone
    #Default: !Select [1, !GetAZs '']

  # Remote Access Network
#  RemoteCidrForSecurityGroup:
#    Description: CIDR Block for SG to Grant Access to Instances (i.e. 192.168.100.0/24)
#    Type: String
#    MinLength: '9'
#    MaxLength: '18'
#    Default: 192.168.111.0/24
#    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
#    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.

#  RemoteCidrForPublicAcl:
#    Description: CIDR Block for Public ACL to Grant Access to Network (i.e. 32.159.24.111/32)
#    Type: String
#    MinLength: '9'
#    MaxLength: '18'
#    Default: 32.159.24.222/32
#    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
#    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.

  # Rule Numbers
  AllowVpcSubnetsRuleNumber:
    Type: Number
    Default: '100'
#  AllowRemoteNetworkPublicRuleNumber:
#    Type: Number
#    Default: '105'
  AllowHttpToPublicRuleNumber:
    Type: Number
    Default: '200'
  AllowHttpsToPublicRuleNumber:
    Type: Number
    Default: '205'
  DenyMysqlToPublicRuleNumber:
    Type: Number
    Default: '800'
  DenyOracleToPublicRuleNumber:
    Type: Number
    Default: '805'
  DenyAuroraToPublicRuleNumber:
    Type: Number
    Default: '810'
  DenyNFSToPublicRuleNumber:
    Type: Number
    Default: '815'
  DenyRDPToPublicRuleNumber:
    Type: Number
    Default: '820'
  DenyPostgreToPublicRuleNumber:
    Type: Number
    Default: '825'
  Deny8080ToPublicRuleNumber:
    Type: Number
    Default: '830'
  Deny8443ToPublicRuleNumber:
    Type: Number
    Default: '835'
  AllowReturnTrafficToPublicRuleNumber:
    Type: Number
    Default: '900'
  AllowAllInboundPrivateRuleNumber:
    Type: Number
    Default: '150'
  AllowAllOutboundPublicRuleNumber:
    Type: Number
    Default: '100'
  AllowAllOutboundPrivateRuleNumber:
    Type: Number
    Default: '100'

  EnvironmentName:
    Type: String
    Description: Environment name - dev, test, stg or prod
    Default: dev
    AllowedValues:
      - dev
      - test
      - stg
      - prod
    ConstraintDescription: Specify either dev, test, stg or prod


##########################################  M E T A D A T A ##########################################
Metadata:
  
  Authors:
    Description: Germ√°n Torres M. (gtorres80@gmail.com)
  License:
    Description: 'Por definir'

  AWS::CloudFormation::Interface:
    ParameterGroups:    
    - Label:
        default: 'VPC Parameters'
      Parameters:
        - VpcCIDR
    - Label:
        default: 'Subnets Parameters'
      Parameters:
        - PublicASubnetAZ1CIDR
        - PublicASubnetAZ2CIDR
        - PrivateASubnetAZ1CIDR
        - PrivateASubnetAZ2CIDR
        - PrivateBSubnetAZ1CIDR
        - PrivateBSubnetAZ2CIDR
    - Label:
        default: 'Region Availability Zones'
      Parameters:
        - AvailabilityZone1
        - AvailabilityZone2
    - Label:
        default: Environment
      Parameters:
        - EnvironmentName
        - Owner
    - Label:
        default: 'Public ACL Rule Numbers'
      Parameters:
        - AllowVpcSubnetsRuleNumber
#        - AllowRemoteNetworkPublicRuleNumber
        - AllowHttpToPublicRuleNumber
        - AllowHttpsToPublicRuleNumber
        - DenyMysqlToPublicRuleNumber
        - DenyOracleToPublicRuleNumber
        - DenyAuroraToPublicRuleNumber
        - DenyNFSToPublicRuleNumber
        - DenyRDPToPublicRuleNumber
        - DenyPostgreToPublicRuleNumber
        - Deny8080ToPublicRuleNumber
        - Deny8443ToPublicRuleNumber
        - AllowReturnTrafficToPublicRuleNumber        
        - AllowAllOutboundPublicRuleNumber        
    - Label:
        default: 'Private ACL Rule Numbers'
      Parameters:
        - AllowAllInboundPrivateRuleNumber
        - AllowAllOutboundPrivateRuleNumber
#    - Label:
#        default: 'Remote Access Network'
#      Parameters:
#        - RemoteCidrForPublicAcl
#        - RemoteCidrForSecurityGroup

    ParameterLabels:
      VpcCIDR:
        default: VPC CIDR Block
      AvailabilityZone1:
        default: Availability Zone 1
      AvailabilityZone2:
        default: Availability Zone 2
      PublicASubnetAZ1CIDR:
        default: Public Subnet AZ 1
      PublicASubnetAZ2CIDR:
        default: Public Subnet AZ 2
      PrivateASubnetAZ1CIDR:
        default: Private Subnet AZ 1
      PrivateASubnetAZ2CIDR:
        default: Private Subnet AZ 2
      PrivateBSubnetAZ1CIDR:
        default: Private Subnet AZ 1
      PrivateBSubnetAZ2CIDR:
        default: Private Subnet AZ 2
      Owner:
        default: Team or Individual Owner
#      RemoteCidrForSecurityGroup:
#        default: Network CIDR for SG
#      RemoteCidrForPublicAcl:
#        default: Network CIDR for ACL
      AllowVpcSubnetsRuleNumber:
        default: Allow VPC Subnets
#      AllowRemoteNetworkPublicRuleNumber:
#        default: Allow Remote Network
      AllowHttpToPublicRuleNumber:
        default: Allow HTTP
      AllowHttpsToPublicRuleNumber:
        default: Allow HTTPS
      DenyMysqlToPublicRuleNumber:
        default: Deny MySQL
      DenyOracleToPublicRuleNumber:
        default: Deny Oracle
      DenyAuroraToPublicRuleNumber:
        default: Deny Aurora
      DenyNFSToPublicRuleNumber:
        default: Deny NFS
      DenyRDPToPublicRuleNumber:
        default: Deny RDP
      DenyPostgreToPublicRuleNumber:
        default: Deny Postgre
      Deny8080ToPublicRuleNumber:
        default: Deny 8080
      Deny8443ToPublicRuleNumber:
        default: Deny 8443
      AllowReturnTrafficToPublicRuleNumber:
        default: Allow Return Traffic
      AllowAllOutboundPublicRuleNumber:
        default: Public Outbound
      AllowAllInboundPrivateRuleNumber:
        default: Private Inbound
      AllowAllOutboundPrivateRuleNumber:
        default: Private Outbound


##########################################  R E S O U R C E S ##########################################
Resources:
  ############## Create VPC ##############
  # projectName-environmentName-aws:region-vpc
  # ej. project-dev-us-east-1-vpc
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "vpc" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
    
  ############## Create Subnet ##############
  # projectName-environmentName-aws-availabilityZone1-public-subnet
  # ej. project-dev-us-east-1a-public-subnet
  PublicASubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicASubnetAZ1CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "public-subnet" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone2-public-subnet
  # ej. project-dev-us-east-1b-public-subnet
  PublicASubnetAZ2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicASubnetAZ2CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "public-subnet" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone1-private1-subnet
  # ej. project-dev-us-east-1a-private1-subnet
  PrivateASubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateASubnetAZ1CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "private1-subnet" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
   
  # projectName-environmentName-aws-availabilityZone2-private1-subnet
  # ej. project-dev-us-east-1b-private1-subnet
  PrivateASubnetAZ2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateASubnetAZ2CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "private1-subnet" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # projectName-environmentName-aws-availabilityZone1-private2-subnet
  # ej. project-dev-us-east-1a-private2-subnet
  PrivateBSubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateBSubnetAZ1CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name        
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "private2-subnet" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  # projectName-environmentName-aws-availabilityZone2-private2-subnet
  # ej. project-dev-us-east-1b-private2-subnet
  PrivateBSubnetAZ2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateBSubnetAZ2CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name    
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "private2-subnet" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  ############## Create Internet Gateway ##############
  # projectName-environmentName-aws:region-igw
  # ej. project-dev-us-east-1-igw
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "igw" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  ############## Attachment Internet Gateway ##############
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
    - InternetGateway
    - VPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ############## Create Route Table Public ##############
  # StackName-environmentName-public-rtb
  # ej. project-dev-public-rtb
  RouteTablePublic: # should be RouteTableAPublic, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, "public-rtb" ] ]
      - Key: Network
        Value: public
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTablePublicInternetRoute: # should be RouteTablePublicAInternetRoute, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::Route'
    DependsOn: 
    - VPCGatewayAttachment
    - RouteTablePublic
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Route Table Subnet Associations
  RouteTableAssociationPublicAZ1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicASubnetAZ1
    - RouteTablePublic
    Properties:
      SubnetId: !Ref PublicASubnetAZ1
      RouteTableId: !Ref RouteTablePublic
  
  RouteTableAssociationPublicAZ2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicASubnetAZ2
    - RouteTablePublic
    Properties:
      SubnetId: !Ref PublicASubnetAZ2
      RouteTableId: !Ref RouteTablePublic
 
  # The NAT IP for the private subnet, as seen from within the public one
  # ej. project-dev-us-east-1a-ip
  NatEIP1:    
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "ip" ] ]      

  # The NAT IP for the private subnet, as seen from within the public one
  # ej. project-dev-us-east-1b-ip
  NatEIP2:    
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "ip" ] ]

  ############## Create NAT Gateway ##############
  # The NAT gateway for the private subnet
  # ej. project-dev-us-east-1a-nat-gw
  NATGateway1:    
    Type: AWS::EC2::NatGateway
    DependsOn: 
    - VPCGatewayAttachment
    - PublicASubnetAZ1
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicASubnetAZ1
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone1", "nat-gw" ] ]

  # The NAT gateway for the private subnet
  # ej. project-dev-us-east-1b-nat-gw
  NATGateway2:    
    Type: AWS::EC2::NatGateway
    DependsOn: 
    - VPCGatewayAttachment
    - PublicASubnetAZ2
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicASubnetAZ2
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AvailabilityZone2", "nat-gw" ] ]
  
  ############## Create Route Table Private ##############
  # StackName-environmentName-aws:availabilityZone1-private1-rtb
  # ej. project-dev-us-east-1a-private1-rtb
  RouteTableAPrivateAZ1: # should be RouteTableAPrivate, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone1, "private1-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  RouteTableAPrivateAZ1Route:
    Type: 'AWS::EC2::Route'
    DependsOn: 
    - VPCGatewayAttachment
    - RouteTableAPrivateAZ1
    - NATGateway1
    Properties:
      RouteTableId: !Ref RouteTableAPrivateAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  RouteTableAssociationAPrivateAZ1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateASubnetAZ1
    - RouteTableAPrivateAZ1
    Properties:
      SubnetId: !Ref PrivateASubnetAZ1
      RouteTableId: !Ref RouteTableAPrivateAZ1

  # StackName-environmentName-aws:availabilityZone2-private1-rtb
  # ej. project-dev-us-east-1b-private1-rtb
  RouteTableAPrivateAZ2:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone2, "private1-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTableAPrivateAZ2Route:
    Type: 'AWS::EC2::Route'
    DependsOn: 
    - VPCGatewayAttachment
    - RouteTableAPrivateAZ2
    - NATGateway2
    Properties:
      RouteTableId: !Ref RouteTableAPrivateAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  RouteTableAssociationAPrivateAZ2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateASubnetAZ2
    - RouteTableAPrivateAZ2
    Properties:
      SubnetId: !Ref PrivateASubnetAZ2
      RouteTableId: !Ref RouteTableAPrivateAZ2
  
  # StackName-environmentName-aws:availabilityZone1-private2-rtb
  # ej. project-dev-us-east-1a-private2-rtb
  RouteTableBPrivateAZ1: # should be RouteTableAPrivate, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone1, "private2-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName
  
  RouteTableBPrivateAZ1Route:
    Type: 'AWS::EC2::Route'
    DependsOn: 
    - VPCGatewayAttachment
    - RouteTableBPrivateAZ1
    - NATGateway1
    Properties:
      RouteTableId: !Ref RouteTableBPrivateAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  RouteTableAssociationBPrivateAZ1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateBSubnetAZ1
    - RouteTableBPrivateAZ1
    Properties:
      SubnetId: !Ref PrivateBSubnetAZ1
      RouteTableId: !Ref RouteTableBPrivateAZ1

  # StackName-environmentName-aws:availabilityZone2-private2-rtb
  # ej. project-dev-us-east-1b-private2-rtb
  RouteTableBPrivateAZ2:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref AvailabilityZone2, "private2-rtb" ] ]
      - Key: Network
        Value: private
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  RouteTableBPrivateAZ2Route:
    Type: 'AWS::EC2::Route'
    DependsOn:
    - VPCGatewayAttachment
    - RouteTableBPrivateAZ2
    - NATGateway2
    Properties:
      RouteTableId: !Ref RouteTableBPrivateAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  RouteTableAssociationBPrivateAZ2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PrivateBSubnetAZ2
    - RouteTableBPrivateAZ2
    Properties:
      SubnetId: !Ref PrivateBSubnetAZ2
      RouteTableId: !Ref RouteTableBPrivateAZ2
  
  # Public Network ACL
  # StackName-environmentName-aws:region-public-acl
  # ej. project-dev-us-east-1-public-acl
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "public-acl" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # Public Network ACL Rules
  InboundPublicNetworkAclAllowVPCSubnets:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref AllowVpcSubnetsRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref VpcCIDR
      PortRange:
        From: '0'
        To: '65535'
  
#  InboundPublicNetworkAclAllowRemoteNetwork:
#    Type: AWS::EC2::NetworkAclEntry
#    DependsOn: PublicNetworkAcl
#    Properties:
#      NetworkAclId: !Ref PublicNetworkAcl
#      RuleNumber: !Ref AllowRemoteNetworkPublicRuleNumber
#      Protocol: "-1"
#      RuleAction: allow
#      Egress: 'false'
#      CidrBlock: !Ref RemoteCidrForPublicAcl
#      PortRange:
#        From: '0'
#        To: '65535'
  
  InboundPublicNetworkAclAllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref AllowHttpToPublicRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

  InboundPublicNetworkAclAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref AllowHttpsToPublicRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'

  InboundPublicNetworkAclDenyMssql:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref DenyMysqlToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1433'
        To: '1433'

  InboundPublicNetworkAclDenyOracle:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref DenyOracleToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1521'
        To: '1521'

  InboundPublicNetworkAclDenyAurora:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref DenyAuroraToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '3306'
        To: '3306'

  InboundPublicNetworkAclDenyNfs:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref DenyNFSToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '2049'
        To: '2049'

  InboundPublicNetworkAclDenyRdp:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref DenyRDPToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '3389'
        To: '3389'

  InboundPublicNetworkAclDenyPostgre:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref DenyPostgreToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '5432'
        To: '5432'

  InboundPublicNetworkAclDeny8080:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref Deny8080ToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8080'
        To: '8080'

  InboundPublicNetworkAclDeny8443:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref Deny8443ToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8443'
        To: '8443'

  InboundPublicNetworkAclAllowReturnTraffic:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref AllowReturnTrafficToPublicRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  OutboundPublicNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref AllowAllOutboundPublicRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  # Public Subnet Association
  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicASubnetAZ1
    - PublicNetworkAcl
    Properties:
      SubnetId: !Ref PublicASubnetAZ1
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicASubnetAZ2
    - PublicNetworkAcl
    Properties:
      SubnetId: !Ref PublicASubnetAZ2
      NetworkAclId: !Ref PublicNetworkAcl

  # Private Network ACL
  # StackName-environmentName-aws:region-private-acl
  # ej. project-dev-us-east-1-private-acl
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref AWS::StackName, !Ref EnvironmentName, !Ref "AWS::Region", "private-acl" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  # Private Network ACL Rules
  InboundEphemeralPrivateNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: !Ref AllowAllInboundPrivateRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  OutboundPrivateNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: !Ref AllowAllOutboundPrivateRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  # Private Subnet Associations
  PrivateASubnetNetworkAclAssociationAZ1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateASubnetAZ1
    - PrivateNetworkAcl
    Properties:
      SubnetId:
        !Ref PrivateASubnetAZ1
      NetworkAclId:
        !Ref PrivateNetworkAcl

  PrivateASubnetNetworkAclAssociationAZ2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateASubnetAZ2
    - PrivateNetworkAcl
    Properties:
      SubnetId: !Ref PrivateASubnetAZ2
      NetworkAclId: !Ref PrivateNetworkAcl

  # Security Groups
  # StackName-environmentName-aws:region-private-acl
  # ej. project-dev-us-east-1-private-acl
  InternalAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Instance to Instance Access in VPC
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-instance-to-instance" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref AWS::StackName
      - Key: Environment
        Value: !Ref EnvironmentName

  InternalAccessSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: InternalAccessSecurityGroup
    Properties:
      GroupId: !Ref InternalAccessSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref InternalAccessSecurityGroup

#  RemoteAccessSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: Instance Access over VPN/Direct Connect
#      VpcId: !Ref VPC
#      Tags:
#      - Key: Name
#        Value: !Join [ "", [ !Ref "AWS::StackName", "-remote-to-instance" ] ]
#      - Key: Owner
#        Value: !Ref Owner
#      - Key: Project
#        Value: !Ref AWS::StackName
#      - Key: Environment
#        Value: !Ref EnvironmentName
#      SecurityGroupIngress:
#      - IpProtocol: "-1"
#        CidrIp: !Ref RemoteCidrForSecurityGroup
#      SecurityGroupEgress:
#      - IpProtocol: "-1"
#        CidrIp: 0.0.0.0/0

Outputs:
  TemplateID:
    Description: 'germantorres.co template id.'
    Value: 'vpc/vpc-2azs'
  TemplateVersion:
    Description: 'germantorres.co template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  AZs: # Better name would be NumberOfAZs, but we keep the name for backward compatibility
    Description: 'Number of AZs'
    Value: 2
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZList:  # Better name would be AZs, but the name was already used
    Description: 'List of AZs'
    Value: !Join [',', [!Select [0, !GetAZs ''], !Select [1, !GetAZs '']]]
    Export:
      Name: !Sub '${AWS::StackName}-AZList'
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'
  CidrBlock:
    Description: 'The set of IP addresses for the VPC.'
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'
  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref PublicASubnetAZ1, !Ref PublicASubnetAZ2]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  SubnetsAPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref PrivateASubnetAZ1, !Ref PrivateASubnetAZ2]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsAPrivate'
  SubnetsBPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref PrivateBSubnetAZ1, !Ref PrivateBSubnetAZ2]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsBPrivate'